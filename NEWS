2018-11-18	Switching to using Ubuntu Xenial for Travis testing.

		infra/travis-install-deps.sh :
		- removed stuff specific to installing gcc-5 or g++-5
		- now uses dosemu-on-travis-ci/Makefile to install dosemu

		.travis.yml :
		- removed tests specifically asking for gcc-5 or g++-5
		- now uses Ubuntu Xenial distribution

		dosemu-on-travis-ci/ :
		- added

		lolwutconf/ :
		- bumped to 50a081d29b

		infra/dosemu-on-travis-ci.tar.xz :
		- added backup package

		infra/lolwutconf.tar.xz :
		- updated

		infra/dosemu-freedos-1.0-bin.tgz :
		- removed

2018-11-14	"Do you have lysdexia?"  (6)

		infra/travis-install-deps.sh :
		- further fix setup of dosemu2...

2018-11-13	"Do you have lysdexia?"  (5)

		infra/travis-install-deps.sh :
		- updated full path to dosemu2 VM programs, sort of
		- fix autoexec.bat handling

		lolwutconf/ :
		- bumped to e74b3182d9

2018-11-12	"Do you have lysdexia?"  (4)

		infra/travis-install-deps.sh :
		- now always does an `sudo apt-get update -y' to properly
		  prime the APT database

		lolwutconf/ :
		- bumped to 47bb66cddb

2018-11-11	"Do you have lysdexia?"  (3)

		GNUmakefile ,
		bin/innocent-pear-front-end.tcc ,
		share/innocent-pear/calm.cc :
		- now adds prefix tags (e.g. ia16-elf-innocent-pear-cc) to
		  names of target-dependent programs for cross builds

		lolwutconf/ :
		- bumped to fbde447de2

2018-06-09	"Do you have lysdexia?"  (2)

		lolwutconf/ :
		- bumped to 18e0a71a1c

2018-06-07	"Do you have lysdexia?"

		.travis.yml :
		- re-enabling ia16-elf builds

2018-04-06	"A businessman is a hybrid of a dancer and a calculator."  (2)

		infra/travis-install-deps.sh :
		- updated commands for tweaking FreeDOS setup for dosemu2

		.travis.yml :
		- disabling ia16-elf builds for the time being

2018-03-05	"A businessman is a hybrid of a dancer and a calculator."

		README.md :
		- updated ia16-elf-g++ URL...

2018-03-04	"Ah say, son, you're about as sharp as a bowlin' ball."

		GNUmakefile ,
		configure :
		- test for target-side `-fno-toplevel-reorder' support

		bin/innocent-pear-front-end.tcc :
		- better error reporting for case where `-wrapper' is not
		  supported (i.e. when using clang)
		- test for target-side `-fno-toplevel-reorder' support

		lolwutconf/ :
		- bumped to e264aa85e4

2018-03-03	ia16-elf-gcc updates. :-)

		infra/travis-build-and-check.sh ,
		infra/travis-install-deps.sh :
		- now uses Ubuntu PPAs for getting binaries for gcc-ia16-elf
		  and dosemu2

		include/innocent-pear/kthxbai.h ,
		include/innocent-pear/lolwut.h ,
		include/innocent-pear/omg.h :
		- "%a3" (e.g.) within __asm causes an `%ss:' override to pop
		  up, so use "%c3" instead

		infra/dosemu-freedos-1.0-bin.tgz :
		- added

		lolwutconf/ :
		- bumped to 1ae66a2f12

2017-11-01	"Less is more or less more"

		include/innocent-pear/omg.h :
		- omg<...>: somewhat increased amount of random stuff at the
		  lowest layers

2017-10-29	"a.out is a misspelling of the French word for ... August." (6)

		infra/travis-install-deps.sh :
		- bumped tag to download ia16-elf-* from, again

2017-10-14	"a.out is a misspelling of the French word for ... August." (5)

		include/innocent-pear/kthxbai.h ,
		include/innocent-pear/omg.h :
		- ia16-elf code may now emit real-mode i80286 instructions
		  such as `sgdt' if it sees compiler macro __IA16_ARCH_I80286

2017-10-13	"a.out is a misspelling of the French word for ... August." (4)

		infra/travis-install-deps.sh :
		- bumped pre-release (tag) to download ia16-elf-* et al. from

2017-09-12	Very minor change...

		.gitignore :
		- added build-ia16-redist.tar.xz

2017-08-21	"a.out is a misspelling of the French word for ... August." (3)

		configure ,
		GNUmakefile :
		- now unpacks files from infra/KeccakCodePackage.tar.xz at
		  build time, not at configuration time

2017-08-20	Travis testing for ia16-elf target. (!)

		.travis.yml :
		- added test setups for ia16-elf

		configure :
		- now always unpacks infra/KeccakCodePackage.tar.xz

		infra/travis-install-deps.sh :
		- now downloads ia16-elf-*, dosemu, and dos2unix, for
		  ia16-elf target

		infra/travis-build-and-check.sh :
		- now properly sets up environment for ia16-elf target

		include/innocent-pear/host/lolcat.h ,
		share/innocent-pear/epic.cc ,
		share/innocent-pear/calm.cc :
		- gcc wrapper now handles subcommands of the form
		  `ia16-elf-as' etc.

		KeccakCodePackage/ :
		- removed as a Git submodule; now sticking to the version in
		  infra/KeccakCodePackage.tar.xz

		lolwutconf/ :
		- bumped to e38a51a4e0

		infra/lolwutconf.tar.xz :
		- updated

2017-08-19	"a.out is a misspelling of the French word for ... August." (2)

		configure ,
		.travis.yml :
		- optimize for size rather than speed, for host and target

2017-08-18	"a.out is a misspelling of the French word for ... August."

		GNUmakefile :
		- fixed a bug in `make install'

		infra/travis-build-and-check.sh :
		- now tests that `make install' works
		- added `-l' option, which will install into ~/.local/ :-)

2017-07-20	"It was all so different before everything changed."  (3)

		include/innocent-pear/rofl.h :
		- may now invoke 32-bit ioctl(...) syscall on Linux/x86-64
		- fixed typo

2017-07-08	"It was all so different before everything changed."  (2)

		include/innocent-pear/dawg.h :
		- interface change:  dawg_impl_1<...>, dawg_impl_2<...>, and
		  dawg<...> no longer add an implicit '\0' at the end of a
		  string
		- updated operator<<(...) to suppress a trailing '\0' at the
		  end of a string, if present

		include/innocent-pear/omg.h ,
		share/innocent-pear/omnomnom.lxx :
		- adds a trailing '\0' at the end of a scrambled string, to
		  agree with dawg.h's new interface

2017-07-03	"It was all so different before everything changed."

		include/innocent-pear/rofl.h :
		- may now invoke 32-bit syscalls, for Linux/x86-64 target

		GNUmakefile :
		- now does debug build of test-doge-abs-reloc test case, again

2017-07-02	"So little time, so little to do."  (3)

		GNUmakefile :
		- now passes output of ia16-elf programs to dos2unix

		configure :
		- now looks for dos2unix program build-side

2017-06-21	"So little time, so little to do."  (2)

		infra/travis-install-deps.sh :
		- now handles `arm-*hf,*' target specifiers properly

2017-06-20	"So little time, so little to do."

		.travis.yml :
		- now says e.g. `arm-linux-gnueabi,armv6' rather than
		  `armv6-linux-gnueabi', following lolwutconf/ changes

		GNUmakefile :
		- now handles `ia16-elf,*' in addition to `ia16-elf' target
		  specifier

		KeccakCodePackage/ :
		- bumped to 83f4063446

		lolwutconf/ :
		- bumped to 61b05be5c0

		infra/KeccakCodePackage.tar.xz ,
		infra/lolwutconf.tar.xz :
		- updated

2017-06-12	"Toddlers are the stormtroopers of the Lord of Entropy."  (3)

		include/innocent-pear/kthxbai.h :
		- more messing with IRQs (via port 0x21) on ia16-elf

2017-06-12	Removed unwanted type promotions and wrap-arounds.

		include/innocent-pear/bbq.h :
		- removed unwanted type promotions in `<<'s
		- do_inv_opt_rept(...) now clips value of N for case 4

		include/innocent-pear/kthxbai.h ,
		include/innocent-pear/orly.h ,
		include/innocent-pear/yarly.h ,
		include/innocent-pear/host/rly.h :
		- removed unwanted type promotions in `<<'s and `>>'s

		share/innocent-pear/doge-01.cc :
		- for ia16-elf, now directly scrambles 0xff as an 8-bit value

		test/test-kthxbai-b.cc ,
		test/test-kthxbai-b.good :
		- new; tests for unwanted type promotions affecting results

		GNUmakefile :
		- added test-kthxbai-b test case

2017-06-11	"Toddlers are the stormtroopers of the Lord of Entropy."  (2)

		GNUmakefile :
		- now no longer uses `readelf', for ia16-elf target

		include/innocent-pear/bbq.h :
		- added ops::allow_loop_plenty and ops::under_disabled_irqs

		include/innocent-pear/kthxbai.h :
		- now uses ops::allow_loop_plenty and ops::under_disabled_irqs
		  on ia16-elf

		include/innocent-pear/omg.h :
		- now uses ops::allow_loop_plenty on ia16-elf
		- may now emit `lahf', `sahf', and `salc' instructions on
		  x86-32/-16

		share/innocent-pear/doge-01.cc ,
		share/innocent-pear/doge-42.cc ,
		share/innocent-pear/doge-i.h :
		- now messes with IRQs on ia16-elf

2017-06-09	"Now assay said Syre Ector vnto Syre Kay"

		README.md :
		- added note on ia16-elf support

2017-06-08	test-doge-with-c now _really_ works on ia16-elf.

		share/innocent-pear/doge-i-ctors.ld :
		- now puts constants from teh<...> into separate .rodata.doge
		  and .data.doge sections, so that they will not be (wrongly)
		  scrambled by `-Xinnocent-pear -doge'; this fixes some
		  test-doge-with-c crashes

		share/innocent-pear/doge-04.cc :
		- removed laxity

		share/innocent-pear/doge-99.cc :
		- slightly tweaked

		include/innocent-pear/kthxbai.h :
		- kthxbai<...> now invokes omg<...> for default case, for
		  fun and profit

		include/innocent-pear/lolwut.h :
		- streamlined lolwut<...>::lolwut(, 3) code

		include/innocent-pear/omg.h :
		- now spews inline assembly commands for ia16-elf
		- now may spew `cwtd' and short jumps with 1 junk byte each,
		  for x86-64/-32/-16
		- now may spew `cwtl' and `cltd' for x86-64/-32

		include/innocent-pear/yarly.h :
		- reduced scrambling layers for ia16-elf

2017-06-05	test-doge-with-c now works on ia16-elf.  And, fixed x86-64
		clang++ regression.

		include/innocent-pear/bbq.h :
		- now defines innocent_pear_ASM_GEN_{OUT, IN, MATCH} to
		  factor out uses of "=g"/"=r,m" (and "g"/"r,m") in other
		  headers -- "g" causes internal ia16-elf-g++ errors, while
		  while "r,m" gives weird code on (x86-64) clang++

		include/innocent-pear/kthxbai.h ,
		include/innocent-pear/omg.h ,
		include/innocent-pear/unpossible.h :
		- now uses innocent_pear_ASM_GEN_{OUT, IN, MATCH}

		include/innocent-pear/lolwut.h :
		- now uses innocent_pear_ASM_GEN_{OUT, IN, MATCH}
		- now scopes kthxbai_impl<...> uses

		include/innocent-pear/orly.h :
		- now uses innocent_pear_ASM_GEN_{OUT, IN, MATCH}
		- orly<...>::wut(...) no longer scrambles starting values on
		  ia16-elf

2017-06-04	test-orly-wut now works on ia16-elf.

		include/innocent-pear/kthxbai.h ,
		include/innocent-pear/lolwut.h ,
		include/innocent-pear/omg.h ,
		include/innocent-pear/orly.h ,
		include/innocent-pear/unpossible.h :
		- changed "g" and "=g" assembly operand constraints into "r,m"
		  and "=r,m", to work around an ia16-elf-gcc issue

		include/innocent-pear/doge.h :
		- somewhat redefined main(...) for ia16-elf

		share/innocent-pear/doge-i.h :
		- somewhat redefined innocent_pear_BIG_BAD for ia16-elf

		share/innocent-pear/doge-04.cc :
		- fewer scrambling layers under ia16-elf

		GNUmakefile :
		- added include/innocent-pear/doge.h as an installable

2017-06-01	"Toddlers are the stormtroopers of the Lord of Entropy."

		include/innocent-pear/rofl.h :
		- x86-64/-32/-16: rofl<...>::memset(.) now marks %rdi/%edi/%di
		  and %rcx/%ecx/%cx as early-clobber

		share/innocent-pear/doge-02.cc :
		- quick and messy fix for ia16-elf linker problem

2017-05-31	orly<...>::wut(...) was broken on ia16-elf.

		GNUmakefile :
		- added test-orly-wut to list of tests, and customized
		  commands for building test-orly-wut, for ia16-elf

		include/innocent-pear/orly.h :
		- orly<...> now uses machine-independent definition of
		  WhichOp (argh!)
		- fixed another silly bug: y <= sizeof(.) should be sizeof(y)
		  <= sizeof(.)

		include/innocent-pear/host/srsly.h :
		- srsly<...> now uses machine-independent definition of
		  which_op_

		test/test-orly-wut.cc :
		- modified to (semi-)work under ia16-elf

2017-05-30	ia16-elf constructors and unscrambling loop hacking...

		share/innocent-pear/doge-i-ctors.ld :
		- new; turns .ctors.* into .init_array.* for ia16-elf

		share/innocent-pear/doge-00.cc :
		- added .init_array.* constructor loop for ia16-elf

		share/innocent-pear/doge-40.cc :
		- minor fix

		GNUmakefile :
		- added doge-i-ctors.ld to dependencies
		- now blasts the link map to stdout (for debugging), when
		  compiling test-doge-with-c test case for ia16-elf

		bin/innocent-pear-front-end.tcc :
		- now names temporary object files for doge-??.cc with their
		  ?? tag numbers, for easier debugging
		- now uses doge-i-ctors.ld

		include/innocent-pear/orly.h :
		- removed munging of p, and fixed munging of q, in orly<...>::
		  wot(p, q, c) and orly<...>::wut(p, q, r)

		include/innocent-pear/rofl.h :
		- rofl<...>::clear_cache(, ) now does nothing on x86-16/-32/
		  -64 even if passed scrambled pointers
		- fixed rofl<...>::ptrace(...) (== -1, ENOSYS) for ia16-elf

		test/test-kthxbai-p.cc :
		- added testing of scrambled _static data_ pointers

2017-05-28	"ERROR: unexpected CPU exception 0x0c err=0x00000000
		cr2=402b9000 while in vm86 (DOS)"

		include/innocent-pear/lolwut.h :
		- now handles lolwut<...>::lolwut(, 2) and (, 3) for ia16-elf

		include/innocent-pear/rofl.h :
		- added custom implementation of rofl<...>::memset(.) for
		  ia16-elf

		share/innocent-pear/doge-01.cc ,
		share/innocent-pear/doge-02.cc ,
		share/innocent-pear/doge-03.cc ,
		share/innocent-pear/doge-04.cc ,
		share/innocent-pear/doge-05.cc ,
		share/innocent-pear/doge-40.cc ,
		share/innocent-pear/doge-42.cc :
		- now uses kthxbai<...>::kthxbai(, 3), and other minor tweaks

		share/innocent-pear/doge-99.cc :
		- now places symbols in the right sections for ia16-elf

2017-05-27	"(.text.unlikely.01.t+0x230): relocation truncated to fit:
		R_386_16 ..."

		bin/innocent-pear-front-end.tcc :
		- for doge mode, now adjusts arguments to ia16-elf linker and
		  ia16-elf-strip

		configure :
		- added __ia16__ detection target-side

		GNUmakefile :
		- updated share/innocent-pear/doge-n*.ld dependencies
		- now defines/undefines innocent_pear_TARGET_IS_IA16 host-side

		include/innocent-pear/orly.h :
		- no longer uses unrolled versions of loops if compiling for
		  ia16-elf

		share/innocent-pear/doge-03.cc ,
		share/innocent-pear/doge-05.cc :
		- minor tweak to rofl<...>::memset(.) call

		share/innocent-pear/doge-40.cc :
		- for ia16-elf:
		  - reimplemented dogecoin_t
		  - no longer calls rofl<...>::clear_cache(...)
		- minor tweak to rofl<...>::memset(.) call

		share/innocent-pear/doge-42.cc :
		- no longer calls rofl<...>::memset(.) if unneeded

		share/innocent-pear/doge-i.h :
		- innocent_pear_CHAFF(.) is now a no-op for ia16-elf, at least
		  for now

		share/innocent-pear/doge-n-dogecoin.ld ,
		share/innocent-pear/doge-n-ifunc.ld :
		- split share/innocent-pear/doge-n.ld into two

		share/innocent-pear/doge-n-dogecoin.noinit.ld :
		- new

		KeccakCodePackage/ :
		- bumped to dc2c9d0792

		lolwutconf/ :
		- bumped to 86e8b79f10

		infra/KeccakCodePackage.tar.xz ,
		infra/lolwutconf.tar.xz :
		- updated

2017-05-16	"warning: ../share/innocent-pear/doge-n.ld contains output
		sections; did you forget -T?"

		configure ,
		GNUmakefile ,
		bin/innocent-pear-front-end.tcc :
		- test for -lgcc_eh target-side
		- do not do useless test for -latomic host-side

2017-05-15	A bit more ia16-elf hacking.

		share/innocent-pear/doge-40.cc :
		- hacks for ia16-elf:
		  - removed unneeded #include <sys/mman.h>
		  - now uses innocent_pear_BIG_BAD

		infra/lolwutconf.tar.xz :
		- updated

2017-05-14	"There is a 20% chance of tomorrow."  (2)

		lolwutconf/ :
		- bumped to a62682e765

2017-05-10	"There is a 20% chance of tomorrow."

		include/innocent-pear/omg.h ,
		include/innocent-pear/rofl.h ,
		test/test-rofl-2.cc :
		- added rofl<...>::modify_ldt(...), for x86-32 and x86-64

2017-05-06	More ia16-elf hacks... and more.

		share/innocent-pear/doge-i.h :
		- now defines innocent_pear_BIG_BAD
		- now includes innocent_pear_DOGE_STATE_11 in seeding

		share/innocent-pear/doge-00.cc :
		- split from share/innocent-pear/doge-00.cc
		- now uses innocent_pear_DOGE_STATE_11
		- removed unneeded #include's

		share/innocent-pear/doge-01.cc :
		- split from share/innocent-pear/doge-00.cc
		- now checks if mprotect(...) is defined
		- now uses innocent_pear_BIG_BAD, innocent_pear_DOGE_STATE_11

		share/innocent-pear/doge-02.cc ,
		share/innocent-pear/doge-03.cc ,
		share/innocent-pear/doge-04.cc ,
		share/innocent-pear/doge-05.cc :
		- now uses innocent_pear_BIG_BAD
		- removed unneeded #include <sys/mman.h>

		share/innocent-pear/doge-42.cc ,
		share/innocent-pear/doge-98.cc :
		- now checks if mprotect(...) is defined

		bin/innocent-pear-front-end.tcc :
		- now uses share/innocent-pear/doge-01.cc
		- now defines and passes innocent_pear_DOGE_STATE_11

		GNUmakefile :
		- added share/innocent-pear/doge-01.cc

		configure :
		- ::kill(, ) takes 2 arguments, not 0...

		include/innocent-pear/yarly.h :
		- reduced scrambling layers even further

2017-05-05	"The best defense against logic is ignorance."

		include/innocent-pear/yarly.h :
		- reduced scrambling layers (sometimes) even outside of
		  ia16-elf --- to reduce build times

2017-05-04	More ia16-elf hacks.  (2)

		include/innocent-pear/yarly.h :
		- yarly<, , true, , > now always uses kthxbai_impl<...>, even
		  on ia16-elf

2017-05-03	More ia16-elf hacks.

		test/test-orly-3.cc :
		- hacks conditional on ia16-elf:
		  - removed argument parsing
		  - now avoids using PRIxLEAST64

2017-05-02	Addresses of labels seem flaky on some platforms.

		include/innocent-pear/omg.h :
		- disabled omg<...>::wheee() on x86-32 and ARM-32 (for now)

		include/innocent-pear/kthxbai.h :
		- hacks for ia16-elf:
		  - now checks operand size before using __asm("" : ...)
		  - removed unused operand in one kthxbai_impl<, , , 0u> case

		include/innocent-pear/orly.h :
		- hacks for ia16-elf:
		  - now checks operand size before using __asm("" : ...)

		include/innocent-pear/yarly.h :
		- now wraps kthxbai_impl<...> call in its own block

2017-05-01	"leavedos(Interp86|3056) called - shutting down"

		configure :
		- now tests for syscall(...) host-side, and syscall(...),
		  getpid(), getppid(), and kill(...) target-side

		GNUmakefile :
		- now tests for syscall(...) host-side, and syscall(...),
		  getpid(), getppid(), and kill(...) target-side
		- added test-kthxbai-p test case to ia16-elf tests

		include/innocent-pear/yarly.h :
		- now reduces scrambling layers when compiling for ia16-elf

		include/innocent-pear/bbq.h :
		- added definitions of internal macros innocent_pear_X86_
		  PREFIX(.) and innocent_pear_X86_BR_PREFIX(.) for ia16-elf

		include/innocent-pear/kthxbai.h :
		- now implements kthxbai_impl<, , , 0u> for ia16-elf

		include/innocent-pear/rofl.h ,
		include/innocent-pear/omg.h ,
		include/innocent-pear/unpossible.h :
		- now tests for syscall(...), getpid(), getppid(), and
		  kill(...)

		lolwutconf/ :
		- bumped to c71c870347

		infra/lolwutconf.tar.xz :
		- updated

2017-04-30	Towards ia16-elf-g++...  "../test/test-orly-1.cc:31:1:
		internal compiler error: Max. number of generated reload
		insns per insn is achieved (90)"

		configure :
		- now tests if mmap(...) is implemented and if ioctl(...),
		  munmap(...), and/or mprotect(...) are defined

		GNUmakefile :
		- now uses $(conf_Host_exe_ext) and $(conf_Target_exe_ext)
		- now disables most test cases for ia16-elf target
		- now writes results of ioctl(...), mmap(...), munmap(...),
		  and mprotect(...) tests to $(config.h.target)
		- now compiles front-end code with innocent_pear_HOST_EXE_EXT
		  defined

		include/innocent-pear/rofl.h :
		- rofl<...>::open(...) fallback implementation now explicitly
		  refers to &::open rather than &open, and so on
		- fixed fallback implementation of rofl<...>::memset(.)
		- each of ioctl(...), mmap(...), munmap(...), and mprotect
		  (...) in rofl<...> now gives ENOSYS if undefined or
		  unimplemented
		- rofl<...>::mmap(...) now uses (void *)-1 if MAP_FAILED is
		  absent

		bin/innocent-pear-front-end.tcc :
		- now uses innocent_pear_HOST_EXE_EXT

		share/innocent-pear/omnomnom.lxx :
		- added hack to remove instances of `4' flag from end of
		  #line directives, which were causing problem for ia16-elf

		lolwutconf/ :
		- bumped to d39383d022

		infra/lolwutconf.tar.xz :
		- updated

2017-04-29	"Without life, Biology itself would be impossible."

		include/innocent-pear/rofl.h :
		- 6-argument syscalls for x86-32 now fall back to syscall(...)
		  library routine  :-/

2017-04-28	Test for rofl<...>::mmap(...) and rofl<...>::munmap(...); and
		other things.

		include/innocent-pear/rofl.h :
		- fixed rofl<...>::mmap(...) so that it compiles, and also
		  scrambles constant arguments
		- rofl<...>::getpagesize() now scans forwards and backwards
		  from first page boundary it finds

		GNUmakefile :
		- added test-rofl-2 test case

		test/test-rofl-1.cc :
		- tweaked

		test/test-rofl-2.cc ,
		test/test-rofl-2.good :
		- new

		infra/travis-build-and-check.sh :
		- now accepts an optional `-x' argument, which will run
		  `configure' under `sh -x'

		KeccakCodePackage/ :
		- bumped to 7c77cc4a4d

		lolwutconf/ :
		- bumped to e630774cb0

		infra/KeccakCodePackage.tar.xz ,
		infra/lolwutconf.tar.xz :
		- updated

2017-04-27	"Everyone is entitled to my opinion."

		bin/innocent-pear-front-end.tcc :
		- now passes `-time' and `-time=(...)' to child processes
		  compiling doge-??.cc

		GNUmakefile :
		- now gets g++ to output _some_ verbose messages when
		  compiling test-doge* test cases

2017-04-26	Page size in terms of msync(...) calls.

		include/innocent-pear/rofl.h :
		- added rofl<...>::msync(...) and rofl<...>::getpagesize()
		- (untested) added rofl<...>::mmap(...) and munmap(...)
		- (untested) added 6-argument syscalls for x86-32 and x86-64
		- added rofl_impl_syscall<...>::syscall_ret::operator==(.)
		- added class rofl_impl_syscall<...>::syscall_mmap_ret

		include/innocent-pear/unpossible.h :
		- added needed rofl<...> forward template declaration

		share/innocent-pear/doge-00.cc :
		- now uses rofl<...>::getpagesize()
		- reduced scrambling layers in rofl<...>::tcflow(...) call

		share/innocent-pear/doge-42.cc ,
		share/innocent-pear/doge-98.cc :
		- now uses rofl<...>::getpagesize()

		test/test-rofl-1.cc ,
		test/test-rofl-1.good :
		- new

		configure :
		- now tests for implemented msync(...), and MS_ASYNC
		  constant, target-side

		GNUmakefile :
		- added test-rofl-1 test case
		- now writes results of tests for msync(...) and MS_ASYNC

2017-04-15	Updated submodules.  (2)

		lolwutconf/ :
		- bumped to 0269f717d3

		infra/lolwutconf.tar.xz :
		- updated

2017-04-11	Updated submodules.

		KeccakCodePackage/ :
		- bumped to affe6688d1

		lolwutconf/ :
		- bumped to 900cf99557

		infra/KeccakCodePackage.tar.xz ,
		infra/lolwutconf.tar.xz :
		- updated

2017-04-04	ARM syscalls, continued.  And, better junk syscalls.

		include/innocent-pear/rofl.h :
		- improved register shuffling for syscalls on ARM

		include/innocent-pear/unpossible.h :
		- now uses rofl<...>::syscall(...) instead of throwing up
		  `int $0x80'/`syscall'/`svc #0' instructions at odd places

2017-04-03	"An unbreakable toy is useful for breaking other toys."  (8)

		include/innocent-pear/rofl.h :
		- for ARM target:
		  - (mostly) unified logic for 0-, 2-, 3-, 4-argument
		    syscalls for g++ 4 and 5
		  - disabled use of "^" constraint modifier for g++ 4

		NEWS :
		- fixed error in 2017-04-02 entry

2017-04-02	"An unbreakable toy is useful for breaking other toys."  (7)

		include/innocent-pear/rofl.h :
		- for ARM target:
		  - `movs' -> `mov' all the way
		  - unified logic for 1-argument syscalls for g++ 4 and 5

2017-03-26	"Anything is possible, unless it's not."  (2)

		share/innocent-pear/rofl.h :
		- under g++ 5 for ARM, now (hopefully) produces better code
		  to juggle registers

		share/innocent-pear/omg.h :
		- under x86-32, tries to avoid __asm goto(...)'ing out of
		  a scope with its own local variables

2017-03-25	"Anything is possible, unless it's not."

		share/innocent-pear/doge-00.cc :
		- renamed from share/innocent-pear/doge-01.cc
		- 01 -> 00

		share/innocent-pear/doge-40.cc :
		- renamed from share/innocent-pear/doge-06.cc
		- 06 -> 40

		share/innocent-pear/doge-42.cc :
		- renamed from share/innocent-pear/doge-07.cc
		- 07 -> 42

		GNUmakefile ,
		bin/innocent-pear-front-end.tcc :
		- 01 -> 00, 06 -> 40, 07 -> 42

2017-03-19	More pointer messiness.  (4)

		share/innocent-pear/doge-01.cc :
		- now (lightly) scrambles _.innocent_pear.text.start and
		  separates it into two parts

2017-03-11	More pointer messiness.  (3)

		share/innocent-pear/doge-01.cc :
		- somewhat obscured the location of the ifunc resolving loop

		share/innocent-pear/doge-99.cc :
		- removed unneeded _.innocent_pear.text.hot.end

2017-03-05	"An unbreakable toy is useful for breaking other toys."  (6)

		share/innocent-pear/doge-i.h :
		- inhibit optimization of irel_sane(.)

2017-03-04	More pointer messiness.  (2)

		include/innocent-pear/kthxbai.h :
		- kthxbai<, S *, ...> now casts sizeof(S) to intptr_t --
		  which is signed -- before multiplying or dividing by it

		share/innocent-pear/doge-02.cc ,
		share/innocent-pear/doge-03.cc ,
		share/innocent-pear/doge-04.cc ,
		share/innocent-pear/doge-05.cc :
		- added chaff

		share/innocent-pear/doge-06.cc ,
		share/innocent-pear/doge-07.cc :
		- take advantage of interface changes to orly<...> and
		  kthxbai<...> to scramble pointers

2017-03-03	More pointer messiness.

		include/innocent-pear/kthxbai.h :
		- can now subtract two scrambled pointers (kthxbai<...>::
		  operator-(.)) with displacement differences optimized away
		  at compile time
		- kthxbai<...>::operator++(.) and kthxbai<...>::operator--
		  ([.]) are now always inline
		- added kthxbai<, const void *, ...>, for completeness
		- now uses intptr_t instead of ptrdiff_t for differences
		  between pointers

		include/innocent-pear/lolwut.h :
		- added lolwut<...>::diff_in_chars(.) and lolwut<...>::
		  operator+(), mainly to support kthxbai<...>::operator-(.)
		- lolwut<..., 0u> now also sends displacement to kthxbai<...>
		  to hinder optimizations
		- now uses intptr_t instead of ptrdiff_t for differences
		  between pointers

		share/innocent-pear/doge-01.cc :
		- now uses intptr_t instead of ptrdiff_t for differences
		  between pointers
		- now avoids dereferencing scrambled pointers too much

		share/innocent-pear/doge-i.h :
		- upped scrambling of relocation types

		configure ,
		GNUmakefile :
		- test for std::intptr_t or ::intptr_t

2017-03-02	"An unbreakable toy is useful for breaking other toys."  (5)

		share/innocent-pear/doge-01.cc :
		- tweaked pointer scrambling to allow more operations

		share/innocent-pear/doge-02.cc ,
		share/innocent-pear/doge-03.cc :
		- tweaked pointer scrambling to allow more operations, and
		  to reduce the pointer scrambling when unfrobbing .text and
		  .rodata

		share/innocent-pear/doge-04.cc ,
		share/innocent-pear/doge-05.cc :
		- take advantage of interface changes to orly<...> and
		  kthxbai<...> to scramble pointers

2017-03-01	"An unbreakable toy is useful for breaking other toys."  (4)

		include/innocent-pear/orly.h :
		- orly<, T, ...>::wot(p, q, c) and orly<, T, ...>::wut(p, q[,
		  r]) now allow p and q to be objects that "point to" T, not
		  necessarily `T *' values

		include/innocent-pear/kthxbai.h :
		- kthxbai<...> now has postincrement and postdecrement

		include/innocent-pear/lolwut.h :
		- added lolwut<...>::operator->()

		share/innocent-pear/doge-01.cc ,
		share/innocent-pear/doge-02.cc ,
		share/innocent-pear/doge-03.cc ,
		test/test-orly-wut.cc :
		- take advantage of interface changes to orly<...> and
		  kthxbai<...> to scramble pointers

2017-02-25	"An unbreakable toy is useful for breaking other toys."  (3)

		share/innocent-pear/doge-i.h :
		- now frobs Elfxx_Rel{, a}::r_info values before testing them

2017-02-22	"An unbreakable toy is useful for breaking other toys."  (2)

		include/innocent-pear/lolwut.h :
		- lolwut_impl<...> can now do pointers to const items

		share/innocent-pear/doge-01.cc :
		- ifunc hack now has a thin layer of pointer scrambling...

2017-02-10	"An unbreakable toy is useful for breaking other toys."

		README.md :
		- now explicitly states that testing is done on Linux

2017-02-06	Better handling of GNU indirect functions.  (2)

		share/innocent-pear/doge-99.cc ,
		share/innocent-pear/doge-n.ld ,
		share/innocent-pear/doge-i.h :
		- .rel{, a}.plt -> .rel{, a}.bss -- ELF on ARM places
		  .rel{, a}.iplt _before_ .rel{, a}.plt but after .rel{, a}
		  .bss

2017-02-05	"Harp not on that string."

		share/innocent-pear/doge-n.ld :
		- tweaked to use DEFINED(.)
		- .init now slurps up any stray definitions of .rel{, a}.
		  {, i}plt sections not used by the default linker script

		share/innocent-pear/doge-01.cc :
		- in debug mode, now detects if __wrap___pthread_initialize_
		  minimal() is called more than once

		share/innocent-pear/doge-07.cc :
		- some debugging output for ifunc resolving

		share/innocent-pear/doge-99.cc ,
		share/innocent-pear/doge-i.h :
		- now using a different way to define rel{, a}_iplt_start

		bin/innocent-pear-front-end.tcc :
		- scrapped -lstdc++ -latomic -lc -lgcc -lgcc_eh for dynamic
		  linking -- it is causing problems with -static-libstdc++

		GNUmakefile :
		- upon an error from a test binary, now dumps entire binary

2017-02-04	Better handling of GNU indirect functions.

		share/innocent-pear/doge-01.cc ,
		share/innocent-pear/doge-07.cc ,
		share/innocent-pear/doge-i.h ,
		share/innocent-pear/doge-n.ld :
		- implemented .rel{,a}.iplt + ::__pthread_initialize_minimal()
		  hack

		share/innocent-pear/doge-99.cc :
		- tweaked

		bin/innocent-pear-front-end.tcc :
		- now tries to rope in -lstdc++, -latomic, -lc, -lgcc, and/or
		  -lgcc_eh even if not linking statically
		- implemented .rel{,a}.iplt + ::__pthread_initialize_minimal()
		  hack

		configure :
		- now looks for __ELF__, ::getauxval(.), and ::__pthread_
		  initialize_minimal() target-side

		GNUmakefile :
		- now defines/undefines innocent_pear_FIX_ELF_IFUNC both
		  host-side and target-side, and innocent_pear_HAVE_FUNC_
		  GETAUXVAL host-side

		README.md :
		- updated bug description for GNU "indirect functions"

2017-02-02	Can now scramble C and C++ library routines in statically-
		-linked programs.

		bin/innocent-pear-front-end.tcc :
		- at link time, now tries to rope in -lstdc++, -latomic,
		  -lc, -lgcc, and/or -lgcc_eh after each doge-??.cc module,
		  if linking statically

		GNUmakefile ,
		configure :
		- detect whether we are using libstdc++ target-side, by
		  looking for ::__gnu_cxx::__verbose_terminate_handler()

		README.md :
		- added bug description for GNU "indirect functions"

		lolwutconf/ :
		- bumped to d17b1ca198

2017-02-01	Tainting and range division.  (4)

		include/innocent-pear/orly.h :
		- orly_impl<...>::taint(y, t) no longer taints based on t's
		  numeric magnitude

2017-01-31	Tainting and range division -- now with a twist.  (2)

		include/innocent-pear/kthxbai.h ,
		include/innocent-pear/omg.h :
		- upped the maximum number of iterations for inner loops

		include/innocent-pear/orly.h :
		- orly_impl<...>::taint(y, t) now has more probability mass
		  for the alternatives that frob t

		include/innocent-pear/bbq.h :
		- do_op_rept<...>(...) and do_inv_op_rept<...>(...) now
		  properly cast N

2017-01-30	Tainting and range division -- now with a twist.

		include/innocent-pear/orly.h :
		- orly_impl<...>::taint(y, t) may now frob a bit in t after
		  its state is known; result is that solve-vm.py now gives
		  wrong answers for test-orly-1 (for now -- w00t)

2017-01-22	Tainting and range division.  (3)

		include/innocent-pear/orly.h :
		- rewrote and somewhat simplified tainting code
		- taint conditions now depend on `Boreal' template parameter

		include/innocent-pear/bbq.h :
		- somewhat optimized (compile-time) a case in do_op_rept(...)

		test/test-orly-2.cc :
		- upped scrambling levels for first orly<...> operation
		- enabled badness for g2(.)

		test/test-orly-3.cc ,
		test/test-orly-3.good :
		- new

		GNUmakefile :
		- added test-orly-3 test case

		share/innocent-pear/calm.cc ,
		share/innocent-pear/keyboard.cc :
		- removed string scrambling

2017-01-21	Tainting and range division.  (2)

		include/innocent-pear/orly.h :
		- orly<...>::operator()(x0, x1 ... x9) now tries to taint
		  yarly<...>()(x1 ... x9) with x0 even when Levels == 0
		- added "range division" that uses bit-wise test

		include/innocent-pear/unpossible.h ,
		- made unpossible<...> a `class' rather than a `struct' (to
		  stop clang++ warnings)
		- removed redundant definition of `WhichTyp'

		include/innocent-pear/omg.h :
		- made unpossible<...> a `class' rather than a `struct' (to
		  stop clang++ warnings)

		share/innocent-pear/sleepier.cc :
		- now actually checks return values of write(...) and
		  ftruncate(...)

2017-01-20	Tainting and range division.

		include/innocent-pear/bbq.h :
		- replaced new invertible operation with a cheaper one
		- tweaked pow(.) implementation

		include/innocent-pear/orly.h :
		- now uses range division in deciding whether to taint

		include/innocent-pear/host/srsly.h :
		- updated per bbq.h changes

		test/test-orly-1.cc :
		- reduced recursion levels for one of the subtests
		- now outputs results in either "0x"-prefixed hex (no
		  arguments) or decimal (1 argument)

		test/test-orly-2.cc :
		- now outputs results in either "0x"-prefixed hex (no
		  arguments) or decimal (1 argument)

		test/test-orly-1.good ,
		test/test-orly-2.good :
		- updated per .cc changes

2017-01-19	Tainting.

		include/innocent-pear/orly.h :
		- now taints output of yarly<...>()(x1 ... x9) with x0

2017-01-18	"No, I'm a frayed knot."  (6)

		include/innocent-pear/bbq.h ,
		include/innocent-pear/host/srsly.h :
		- added one more invertible operation

		test/test-orly-1.cc ,
		test/test-orly-2.cc :
		- rewrote somewhat, to make them (more) runnable under Salwan
		  et al.'s solve-vm.py  (-:
		  - may now accept one command line argument
		  - now uses printf(...) rather than std::cout << ...

2017-01-08	"No, I'm a frayed knot."  (5)

		include/innocent-pear/omg.h :
		- on x86-32 and x86-64, improved the generation of `verr' and
		  `verw' to suppress (e.g.) `movzwl' casts which come after
		- now uses ops::under_unpossible flag, removing need for
		  `bogo' function parameter

		include/innocent-pear/bbq.h :
		- added ops::under_unpossible flag

		include/innocent-pear/unpossible.h :
		- unpossible<...> now accepts an additional template
		  parameter (`class T')
		- added unpossible<...>::unpossible(.)

		include/innocent-pear/kthxbai.h :
		- now invokes unpossible<...> directly, not via omg<...>
		- moved `impl_n3' typedef into the only code block needing it

		NEWS :
		- fixed typo in 2016-12-28 entry

2017-01-07	"No, I'm a frayed knot."  (4)

		include/innocent-pear/dawg.h :
		- dawg_impl_2<...>::operator>>(.): added back (some)
		  randomization of character order, plus a bit more

		test/test-dawg-syn.cc ,
		test/test-dawg-syn.good :
		- added subtests for dawg<...>::operator>>(.)

		GNUmakefile :
		- now dumps smaller portions of compiled test binaries, again

2017-01-06	"No, I'm a frayed knot."  (3)

		share/innocent-pear/doge-01.cc :
		- reduced the scrambling around the getpagesize() and
		  mprotect(...) calls

		include/innocent-pear/dawg.h :
		- dawg_impl_2<...>::operator>>(.): removed randomization of
		  character order (for now)

2017-01-04	More syntactic sugar for strings.

		share/innocent-pear/omnomnom.lxx :
		- added $$"..." and $$L"..."

		test/test-dawg-syn.cc ,
		test/test-doge-with-dawg.cc ,
		test/test-yodawg-syn.cc :
		- added testing of $$"..." and $$L"..."

		include/innocent-pear/omg.h :
		- now only uses FS_IOC_GETFLAGS and FS_IOC_GETVERSION ioctls
		  if allow_resource_unsafes is on

		README.md :
		- added brief note on syntactic sugar for strings
		- _Description_ now comes before _Synopsis_

2017-01-02	Be even less verbose.

		bin/innocent-pear-dogecoin.cc :
		- now cuts off long lists of section names in its stderr
		  output

2016-12-31	Looks stable and somewhat symmetrical.

		include/innocent-pear/dawg.h :
		- factored dawg_impl<...> into two classes, dawg_impl_1<...>
		  and dawg_impl_2<...>
		- dawg_impl_2<...>::operator>>(.) now writes characters in
		  random order

		include/innocent-pear/omg.h :
		- now uses dawg_impl_2<...> instead of dawg_impl<...>
		- made buffer for "/dev/tty" oversized

		include/innocent-pear/yodawg.h :
		- now uses dawg_impl_2<...> instead of dawg_impl<...>

		share/innocent-pear/doge-i.h :
		- further reduced output of innocent_pear_CHAFF(.)

2016-12-30	"No, I'm a frayed knot."  (2)

		include/innocent-pear/orly.h ,
		include/innocent-pear/yarly.h :
		- yarly<...>::wut(...) ~> orly<...>::wot(...)
		- yarly<...>::zot(...) ~> orly<...>::zot(...)

		include/innocent-pear/omg.h :
		- changed to use orly<...>::zot(...)

		include/innocent-pear/host/rly.h :
		- removed rly<...>::wut(...)

		share/innocent-pear/doge-01.cc :
		- combined 3 functions into one huge function -- again

		test/test-doge-with-dawg.cc ,
		test/test-doge-with-dawg.good :
		- new

		GNUmakefile :
		- added test-doge-with-dawg test case

2016-12-29	"No, I'm a frayed knot."

		include/innocent-pear/teh.h :
		- added a layer of indirection to allow several "variables"
		  to be shared, by grouping identical constants into "bins"
		- "variables" may now go into read-only data
		- now uses __attribute__((nocommon)) to prevent "variables"
		  from entering BSS

		include/innocent-pear/dawg.h :
		- duplicated code and lowered maximum levels of scrambling,
		  to reduce compiler's resource usage  :-/
		- dawg_impl<, CT, , >::operator>>(char *) -> dawg_impl<, CT,
		  , >::operator>>(CT *)
		- rewrote to use teh<...>

		include/innocent-pear/yarly.h :
		- added yarly<...>::zot(...)
		- fixed excess arguments in yarly<...>::wut(...) (untested)
		- yarly<...>::wut(p, q) now no longer tries to confuse alias
		  analysis for p and q, if the precise distance between them
		  is known

		include/innocent-pear/orly.h :
		- orly<...>::wot(p, q, ) now no longer tries to confuse alias
		  analysis for p and q, if the precise distance between them
		  is known

		include/innocent-pear/omg.h :
		- now uses dawg_impl<...> to lay out filenames, and yarly
		  <...>::zot(...) to scrub memory

		include/innocent-pear/kthxbai.h :
		- now takes advantage of new teh<...> to collapse two cases
		  into one

		include/innocent-pear/host/rly.h :
		- updated to match yarly.h

		test/test-omg-special.cc ,
		test/test-omg-special.good :
		- reduced number of subtests

		share/innocent-pear/doge-i.h :
		- reduced output of innocent_pear_CHAFF(.)

2016-12-28	Unmerge the unmergeable.

		bin/innocent-pear-front-end.tcc :
		- now passes `-Wa,--Xinnocent-pear=dogecoin=u' to driver
		  (calm.cc) when compiling doge-??.cc modules, instead of
		  using `-fno-merge-constants' `-fno-merge-all-constants' to
		  try to inhibit section merging
		- if `-v' option is given, now also passes `-Wa,-v' calm.cc,
		  and passes `-v' to innocent-pear-doge

		bin/innocent-pear-dogecoin.cc :
		- if seed is given as `u', now makes mergeable sections
		  non-mergeable
		- group information copying:
		  - if copying fails, now says why
		  - fixed silly off-by-one bug
		- now handles trailing `-v' option

		bin/innocent-pear-doge.cc :
		- now handles trailing `-v' option

		include/innocent-pear/teh.h :
		- added template parameter for teh<...>

		include/innocent-pear/kthxbai.h ,
		include/innocent-pear/omg.h :
		- now uses extra template parameter to teh<...>

		include/innocent-pear/host/lolcat.h ,
		share/innocent-pear/epic.cc :
		- added ohai(.) and ohai()

		share/innocent-pear/calm.cc :
		- assembler wrapper now also processes `-v' option and
		  forwards it to innocent-pear-dogecoin

		GNUmakefile :
		- added `-v' to direct command line to innocent-pear-doge
		- removed `-v' for command lines to build test-doge
		  (non-debug) and test-doge-with-c

2016-12-26	"... the impacts of this option are callees may waste some
		stack space, misbehave or jump to a random location."  (2)

		include/innocent-pear/omg.h :
		- on x86-64 under g++, omg<...> now uses __builtin_alloca(0)
		  rather than an indirect call to coax the compiler into not
		  using the red zone
		- on ARM, now uses `mov pc, (r)' instead of `bx (r)', if in
		  ARM mode and if interworking is disabled

		include/innocent-pear/unpossible.h :
		- added back indirect calls, but only for x86-64 and x86-32

2016-12-25	Eye octal.  (2)

		include/innocent-pear/omg.h :
		- rewrote much of omg<...>::wheee(.)
		- now using new interface to tfw<...>
		- ugly hack for testing under Qemu: now does not use
		  FS_IOC_GETFLAGS and FS_IOC_GETVERSION if ptrace(...) is
		  unimplemented

		include/innocent-pear/tfw.h :
		- redefined interface to tfw<...>

		include/innocent-pear/unpossible.h :
		- removed indirect calls

		test/test-omg-wheee.cc ,
		test/test-omg-wheee.good :
		- added subtests

		GNUmakefile :
		- now also conditionally defines $(conf_Lolwutconf_dir)

2016-12-24	Eye octal.

		configure :
		- now handles FS_IOC_GETFLAGS and FS_IOC_GETVERSION constants
		  (in <linux/fs.h>)

		GNUmakefile :
		- now handles FS_IOC_GETFLAGS and FS_IOC_GETVERSION constants
		  (in <linux/fs.h>)
		- added test-omg-special test case

		include/innocent-pear/omg.h :
		- now uses FS_IOC_GETFLAGS and/or FS_IOC_GETVERSION if present
		- fixed some glitches in omg<...>::special(...)'s procedure
		  to decide whether to enable certain sequences

		include/innocent-pear/rofl.h :
		- now writes debug messages about rofl<...>::ioctl if
		  innocent_pear_DEBUG is defined

		include/innocent-pear/kthxbai.h :
		- fixed silly glitch in looping construct

		include/innocent0-pear/tfw.h :
		- rewriting...

		test/test-omg-special.cc ,
		test/test-omg-special.good :
		- new

		infra/wipe-wrapper.sh :
		- now only tries to wipe each file once

2016-12-19	Now uses the `wipe' utility build-side, if present.

		infra/wipe-wrapper.sh :
		- new

		GNUmakefile :
		- may now define $(RM) to use wipe-wrapper.sh

		configure :
		- now checks for `wipe' utility build-side

2016-12-18	"The best prophet of the future is the past."  (2)

		.travis.yml :
		- added back armv4-linux-gnueabi test configuration
		- added (back) x86-32 test configurations with g++ (and gcc)

		README.md :
		- removed compiler crash description -- was likely caused by
		  ohai.h, which is now removed

		include/innocent-pear/omg.h :
		- fixed typo that caused armv4 compilation to fail

		include/innocent-pear/unpossible.h :
		- added workaround for weird armv4 issue

2016-12-17	More loops.

		include/innocent-pear/omg.h :
		- fixed randomization for omg<..., 0>
		- added finite loops for omg<..., {non-zero}>

		share/innocent-pear/doge-i.h :
		- innocent_pear_CHAFF(.) now uses default number of layers of
		  scrambling -- and does it 3 times

2016-12-16	"The best prophet of the future is the past."

		include/innocent-pear/omg.h :
		- unified treatment of omg<...>::omg() and omg<...>::omg(...)

		include/innocent-pear/tfw.h :
		- rewrote tfw<...>::operator!()

2016-12-12	"I shot an arrow in to the air, and it stuck."  (9)

		include/innocent-pear/yarly.h :
		- added yarly<...>::wut(...), for later use

		include/innocent-pear/host/rly.h :
		- added rly<...>::wut(...), for later use

2016-12-04	Loops.

		include/innocent-pear/kthxbai.h :
		- added (finite) loops

		include/innocent-pear/omg.h :
		- on x86-32 and x86-64, `verr' and `verw' are now always
		  eligible

		include/innocent-pear/bbq.h :
		- removed innocent_pear::ops::allow_emulator_unsafes
		- added do_op_rept(...) and do_inv_op_rept(...)

2016-11-27	Commit CCCXXXIII.

		include/innocent-pear/omg.h :
		- for x86-32 and x86-64, may now issue `verr', `verw', `sldt',
		  `sgdt', and/or `sidt' instructions
		- redistributed probabilities

2016-11-25	"I shot an arrow in to the air, and it stuck."  (8)

		configure ,
		GNUmakefile ,
		bin/innocent-pear-front-end.tcc :
		- now try to test for and use `-fwritable-strings' clang++
		  option when compiling the doge-??.cc modules

		include/innocent-pear/bbq.h :
		- removed use of optimize(.) attributes

		share/innocent-pear/doge-i.h :
		- removed use of optimize(.) attribute in innocent_pear_DOGE
		  _MEMSET when under clang++

		LICENSE :
		- reverted to using the GNU LGPL v3

		lolwutconf/ :
		- bumped to c7fa319627

2016-11-21	"I shot an arrow in to the air, and it stuck."  (7)

		include/innocent-pear/omg.h :
		- now does pointer aliasing à la kthxbai.h

2016-11-20	Try to inhibit constant merging for `-Xinnocent-pear -doge'.

		bin/innocent-pear-front-end.tcc :
		- now compiles doge-*.cc routines with -fno-merge-constants
		  and -fno-merge-all-constants, so that constants in these
		  modules do not accidentally end up in scrambled regions

		include/innocent-pear/bbq.h :
		- now defines and uses innocent_pear_always_inline and
		  innocent_pear_always_inline_and(...), and adds attributes
		  for hidden visibility and anti-constant-merging

		include/innocent-pear/lolwut.h ,
		include/innocent-pear/orly.h ,
		include/innocent-pear/rofl.h ,
		include/innocent-pear/tfw.h ,
		include/innocent-pear/unpossible.h ,
		include/innocent-pear/yarly.h ,
		include/innocent-pear/host/lolcat.h ,
		share/innocent-pear/doge-06.cc :
		- now uses innocent_pear_always_inline and
		  innocent_pear_always_inline_and(...)

		include/innocent-pear/omg.h :
		- now uses innocent_pear_always_inline and
		  innocent_pear_always_inline_and(...)
		- omg<...> is now also given hidden visibility (under ELF)
		- omg<...>::omg() now tries to issue `nop's under x86-32,
		  x86-64, and ARM, and also emit dummy instructions for ARM
		  in ARM mode
		- omg<...>::wheee() for ARM now marks ip as clobbered when
		  creating its own veneers
		- reduced confusion layers (again)

		include/innocent-pear/kthxbai.h ,
		include/innocent-pear/rofl.h :
		- now uses innocent_pear_always_inline and
		  innocent_pear_always_inline_and(...)
		- reduced confusion layers (again)

		include/innocent-pear/dawg.h :
		- now uses innocent_pear_always_inline and
		  innocent_pear_always_inline_and(...)
		- tweaked random state advancement

		GNUmakefile :
		- now dumps larger portions of compiled test binaries...
		- no longer compiles test-doge-eh.debug on default (again)

2016-11-19	"I shot an arrow in to the air, and it stuck."  (6)

		include/innocent-pear/omg.h :
		- gobs of debugging code for omg<...>::wheee()

		include/innocent-pear/rofl.h :
		- for ARM, now marks some operands as early-clobber

		GNUmakefile :
		- now also compiles test-omg-wheee in full-fledged debug mode
		- now compiles test-doge-eh.debug (again)

		test/test-omg-wheee.cc ,
		test/test-omg-wheee.good :
		- beefed up

2016-11-18	"I shot an arrow in to the air, and it stuck."  (5)

		include/innocent-pear/omg.h :
		- omg<...>::wheee() now correctly marks `push'...`ret'/`lret'/
		  `iret' sequences as clobbering memory
		- removed use of ohai.h

		include/innocent-pear/unpossible.h :
		- marked junk bytes as clobbering memory _and_ condition flags

		include/innocent-pear/ohai.h :
		- removed -- was causing much trouble for little benefit

		GNUmakefile ,
		share/innocent-pear/doge-01.cc :
		- removed use of ohai.h

2016-11-17	"I shot an arrow in to the air, and it stuck."  (4)

		include/innocent-pear/ohai.h :
		- let us try this...

2016-11-16	Veneers and more.

		include/innocent-pear/omg.h :
		- further fleshed out basis cases for ARM, x86-32, and x86-64
		- omg<...>::wheee():
		  - reduced layers of pointer scrambling
		  - is now public, not private, if either innocent_pear_DEBUG
		    or innocent_pear_DEBUG_WHEEE is defined
		  - for ELF on ARM, now tries generating veneers

		include/innocent-pear/rofl.h :
		- ARM syscalls:
		  - now uses dummy outputs rather than clobbers for 0- and
		    1-argument syscalls; this should give the compiler a bit
		    more freedom when allocating registers
		  - fixed bug in 4-argument syscalls
		- x86-32 under clang++: now produces compiler warning when
		  using fallback

		include/innocent-pear/ohai.h :
		- removed non-working compiler feature workaround

		include/innocent-pear/kthxbai.h :
		- added forward declaration for rofl<...>

		test/test-omg-wheee.cc ,
		test/test-omg-wheee.good :
		- new

		GNUmakefile :
		- added test-omg-wheee test case

2016-11-15	"I shot an arrow in to the air, and it stuck."  (3)

		include/innocent-pear/rofl.h :
		- for x86-32 under clang++, now falls back on calling libc
		  syscall(...) for syscalls with >= 4 arguments, to avoid
		  "ran out of registers during register allocation" error
		- for ARM, now tries to add dummy constant parameters to
		  syscalls, and (g++ >= 5) use register constrants to slot
		  some parameters in right places

2016-11-14	"I shot an arrow in to the air, and it stuck."  (2)

		include/innocent-pear/bbq.h :
		- added innocent_pear::ops::under_ptrace

		include/innocent-pear/kthxbai.h :
		- for Linux target, now includes results of rofl<...>::ptrace
		  (...) in scrambling if under_ptrace active

		include/innocent-pear/lolwut.h :
		- now only uses `.subsection' directive for ELF target

		include/innocent-pear/rofl.h :
		- fixed handling of rofl<...>::ptrace(PT_TRACE_ME, , , ) in
		  debug mode
		- minor fix in rofl_impl_prctl<...>

		share/innocent-pear/doge-i.h ,
		share/innocent-pear/doge-01.cc ,
		share/innocent-pear/doge-02.cc ,
		share/innocent-pear/doge-03.cc ,
		share/innocent-pear/doge-04.cc ,
		share/innocent-pear/doge-05.cc ,
		share/innocent-pear/doge-06.cc ,
		share/innocent-pear/doge-07.cc :
		- now using innocent_pear::ops::under_ptrace
		- factored out scrambling flags from .cc files to doge-i.h

2016-11-13	"I shot an arrow in to the air, and it stuck."

		include/innocent-pear/kthxbai.h ,
		include/innocent-pear/omg.h :
		- use a variant of Duff's Device to get all the weird cases to
		  fall back to the default case and nothing else

2016-11-08	"A child of five could understand this!  Fetch me a child of
		 five."

		infra/KeccakCodePackage.tar.xz ,
		infra/lolwutconf.tar.xz :
		- added backup packages (mainly to work around issue where
		  GitHub's release packages do not include submodules)

		configure :
		- now unpacks infra/KeccakCodePackage.tar.xz and infra/
		  lolwutconf.tar.xz if submodules are not already present

		GNUmakefile :
		- `make distclean' now cleans away submodule directories if
		  they were unpacked from infra/*.tar.xz
		- now includes lolwutconf.mk from $(conf_Lolwutconf_dir)

		lolwutconf/ :
		- bumped to d090d6a1d5

2016-11-06	Let static relocations lie.  (2)

		include/innocent-pear/lolwut.h :
		- for ARM,
		  - now makes sure that lolwut_impl<...>::Disp is even,
		    to work around a bug (?) in binutils in handling Thumb
		    function symbols
		  - added code for case where the target is Thumb sans
		    Thumb-32 but with dynamic linking

		include/innocent-pear/rofl.h :
		- rofl_impl_syscall<...>::syscall_raw(...) for ARM:  this
		  sucks

		.travis.yml :
		- added test setups for armv6 and armv4t with dynamic
		  linking, since the going is getting weird...

2016-11-05	"There is more to life than increasing its speed."

		include/innocent-pear/rofl.h :
		- for ARM, now scrambles calls to the syscall routine(s)
		- reduced layers of scrambling of syscall parameters

		share/innocent-pear/doge-06.cc :
		- split main routine into two; moved cache clearing after
		  relocation processing

2016-11-04	Yes, it still compiles!  ;-)

		GNUmakefile :
		- now dumps smaller portions of compiled test binaries (again)

		include/innocent-pear/kthxbai.h ,
		include/innocent-pear/omg.h :
		- upped default scrambling levels (again)

		include/innocent-pear/rofl.h :
		- upped default scrambling levels
		- now uses `no_cfi' attribute on rofl_impl_syscall<...>::
		  syscall_raw(...) for ARM

		share/innocent-pear/doge-01.cc :
		- split huge function into 3 parts
		- explicitly specified fewer scrambling levels for a few calls

		share/innocent-pear/doge-07.cc :
		- explicitly specified fewer scrambling levels for pretty much
		  all calls

		share/innocent-pear/doge-i.h :
		- reduced the amount of chaff from innocent_pear_CHAFF(.)

		doc/20161104-test-doge-abs-reloc-armv7-a.png :
		- new

		README.md :
		- changed illustration

2016-11-03	A bit less resource wastage at compile time.  A bit more
		branching at run time.

		bin/innocent-pear-front-end.tcc :
		- now closes temporary */calm file descriptor if running
		  C(++) compiler as child process
		- reduced memory leakage for child process parameters

		include/innocent-pear/omg.h :
		- added possibility of choosing between two omg<...>::omg(.)'s

		share/innocent-pear/sleepier.cc :
		- now correctly processes the return value of mkstemp(.) :-\

2016-11-02	"A list is only as strong as its weakest link."  (5)

		include/innocent-pear/tfw.h :
		- new

		include/innocent-pear/omg.h :
		- added possibility that indirect jumps may _not_ be taken,
		  with the help of tfw.h
		- added possibility of choosing between two omg<...>'s
		- redistributed probabilities

		GNUmakefile :
		- added include/innocent-pear/tfw.h as a dependency

2016-10-30	"A list is only as strong as its weakest link."  (4)

		include/innocent-pear/kthxbai.h :
		- more surprise in the basis case

		include/innocent-pear/bbq.h :
		- moved x86 macros in from omg.h, renamed, and fixed bugs

		include/innocent-pear/omg.h :
		- moved x86 macros out to bbq.h
		- innocent_pear_PREFIXED_INSN(...) -> innocent_pear_X86_
		  PREFIXED_INSN(...)
		- omg<...>:
		  - force_nonleaf() -> coax_nonleaf()
		  - fixed bug in masking for Push4 and Push5

2016-10-29	"A list is only as strong as its weakest link."  (3)

		include/innocent-pear/omg.h :
		- x86-64:  now uses a different way to overcome the "red zone"

		include/innocent-pear/unpossible.h :
		- now also produces (spurious) indirect routine calls

2016-10-28	"A list is only as strong as its weakest link."  (2)

		include/innocent-pear/omg.h :
		- factored out branch scrambling code into a separate method
		- x86-32 and x86-64:  factored out different ways of pushing
		  onto stack
		- x86-32:  added use of `ljmpl'

2016-10-26	"A list is only as strong as its weakest link."

		include/innocent-pear/omg.h :
		- x86-32 and x86-64 hacks:
		  - omg<...>::omg() no longer generates `rdtsc'
		  - omg<...>::omg(.) now only produces `rdtsc' if compiling
		    for i486 or above, or for x86-64
		  - now tries to produce `smsw' instructions

		.travis.yml :
		- now tries to use g++ to dynamically link i686 code _without_
		  `-static-libstdc++'

2016-10-23	Round and round and round and round.

		include/innocent-pear/kthxbai.h :
		- alternatives involving opaque predicates:
		  - kthxbai_impl<...>(x, ) now always assigns to a temporary
		    variable before finally assigning to x
		  - removed one alternative

		include/innocent-pear/omg.h ,
		include/innocent-pear/unpossible.h :
		- removed dummy uses of `this'

2016-10-22	"Unpossible!"

		include/innocent-pear/unpossible.h :
		- split from omg.h and given a new name

		include/innocent-pear/kthxbai.h :
		- moved bit_set(...) out to bbq.h
		- further improved opaque predicates -- among other things,
		  can now do non-trivial things in _both_ branches of an
		  `if ... else ...'
		- simplified one of the spurious `do ... while' loops
		- added braces to properly delineate the scopes of the various
		  kthxbai_impl<...> objects in recursion

		include/innocent-pear/omg.h :
		- split omg_impl_0 into unpossible.h
		- omg<...> constructor can now accept a second boolean
		  argument; `true' means we are free to emit junk
		- now calls rofl<...>::open(...) with proper argument cast

		include/innocent-pear/bbq.h :
		- moved bit_set(...) from kthxbai.h

		include/innocent-pear/rofl.h :
		- rofl_impl_syscall<...>::re_arg(.) now directly casts
		  pointers to uintptr_t without going through a union :-)

		GNUmakefile :
		- added include/innocent-pear/unpossible.h to dependencies
		- now dumps larger portions of compiled test binaries (again)

2016-10-21	Round and round and round.

		include/innocent-pear/kthxbai.h :
		- added a dummy `do ... while', and a not-so-dummy one, to
		  produce spurious loops in function control flow graphs;
		  these are given extra probability mass
		- also giving more probability to use of pointer aliasing
		- opaque predicates can now test bits of operands other than
		  the top bit, which should make them even more opaque
		- slightly improved mixing of pseudorandom states

2016-10-20	Round and round.

		include/innocent-pear/kthxbai.h :
		- kthxbai_impl<...> can now try to scramble constants by
		  rotating them a constant number of bits

		include/innocent-pear/bbq.h :
		- switched back from uint64_t to uint_least64_t
		- added code to clip uint_least64_t values to 64 bits -- in
		  case it can hold more
		- pick_hi<.>(.) now only looks at lowest 64 bits of its
		  argument
		- moved ops_flags_t from innocent_pear::impl:: to
		  innocent_pear::

		include/innocent-pear/omg.h :
		- now uses uint_least{64, 32, 16, 8}_t and uintptr_t instead
		  of uint{64, 32, 16, 8}_t, even for machine specific code

		include/innocent-pear/dawg.h ,
		include/innocent-pear/yodawg.h ,
		include/innocent-pear/host/lolcat.h ,
		include/innocent-pear/host/moar.h ,
		share/innocent-pear/lolrus.cc ,
		share/innocent-pear/moar.cc :
		- updated to match bbq.h

		share/innocent-pear/doge-01.cc ,
		share/innocent-pear/doge-02.cc ,
		share/innocent-pear/doge-03.cc ,
		share/innocent-pear/doge-04.cc ,
		share/innocent-pear/doge-05.cc ,
		share/innocent-pear/doge-06.cc ,
		share/innocent-pear/doge-07.cc :
		- updated to match bbq.h
		- now uses `constexpr' instead of `static constexpr' for
		  `flags' (and `flags2'), to prevent the flags from being
		  emitted as data

		bin/innocent-pear-dogecoin.cc ,
		share/innocent-pear/omnomnom.lxx :
		- uint64_t -> uint_least64_t; PRIx64 -> PRIxLEAST64

		bin/innocent-pear-front-end.tcc ,
		share/innocent-pear/calm.cc :
		- removed unneeded explicit references to uint64_t

		configure :
		- instead of uint64_t, now tests for uint_least{64, 32, 16,
		  8}_t, for host and target

		GNUmakefile :
		- updated to match ./configure

2016-10-19	Math, it works.

		include/innocent-pear/bbq.h :
		- added yet another possibility for do_op<...>(...) and
		  do_inv_op<...>(...)
		- trying to streamline the implementation of cpow<...>(.)...
		- now redefining innocent_pear::impl::ops_flags_t as an
		  enum, to try to prevent the innocent_pear::ops:: constants
		  from being emitted as data under `-fno-toplevel-reorder'
		- added ops_flags_t value innocent_pear::ops::allow_minimal

		include/innocent-pear/kthxbai.h ,
		include/innocent-pear/lolwut.h ,
		include/innocent-pear/omg.h ,
		include/innocent-pear/orly.h ,
		include/innocent-pear/rofl.h ,
		include/innocent-pear/yarly.h ,
		share/innocent-pear/omnomnom.lxx ,
		test/test-dawg.cc ,
		test/test-yodawg.cc :
		- now using innocent_pear::ops::allow_minimal

		include/innocent-pear/host/srsly.h :
		- updated to match include/innocent-pear/bbq.h

		share/innocent-pear/doge-01.cc ,
		share/innocent-pear/doge-02.cc ,
		share/innocent-pear/doge-03.cc ,
		share/innocent-pear/doge-04.cc ,
		share/innocent-pear/doge-05.cc ,
		share/innocent-pear/doge-06.cc :
		- updated to agree with new `enum'-style definition of
		  innocent_pear::impl::ops_flags_t

		share/innocent-pear/doge-07.cc :
		- updated to agree with new `enum'-style definition of
		  innocent_pear::impl::ops_flags_t
		- fixed a bug in the flags passed to rofl<...>::memset(.)

2016-10-18	"Nothing is impossible for the man who doesn't have to do it
		 himself."

		include/innocent-pear/kthxbai.h :
		- rewrote value splitting, using std::conditional<...>

		include/innocent-pear/bbq.h :
		- added a new possibility for do_op<...>(...) and
		  do_inv_op<...>(...)
		- rewrote pow(.) template instantiation to use std::
		  numeric_limits<.>

		include/innocent-pear/host/srsly.h :
		- updated to match include/innocent-pear/bbq.h

		test/test-dawg-syn.cc ,
		test/test-dawg-syn.good :
		- really pared down...

2016-10-15	First release, sort of.

		doc/20161015-test-doge.png :
		- new; part of IDA disassembly of an output x86-32 program

		README.md :
		- slightly rewritten
		- added doc/20161015-test-doge.png

2016-10-13	Strip symbols simply by saying `-s'.  (4)

		include/innocent-pear/teh.h :
		- new

		include/innocent-pear/kthxbai.h ,
		include/innocent-pear/omg.h :
		- now uses teh.h for template-instantiated static data items

		share/innocent-pear/doge-02.cc :
		- _.innocent_pear.text.startup.start now has hidden visibility

		GNUmakefile :
		- added teh.h as a dependency
		- now passes `-W' to `readelf -e'

2016-10-12	Strip symbols simply by saying `-s'.  (3)

		share/innocent-pear/doge-01.cc ,
		share/innocent-pear/doge-45.cc ,
		share/innocent-pear/doge-99.cc ,
		share/innocent-pear/doge-i.h ,
		share/innocent-pear/doge-n.ld :
		- made "exported" internal symbols have hidden visibility,
		  especially under ELF

		share/innocent-pear/sleepier.cc :
		- removed needless string obfuscation...

		include/innocent-pear/rofl.h :
		- rofl_impl_syscall<...>::syscall_raw for ARM:
		  - gave it hidden visibility under ELF
		  - removed special-case code for g++ >= 5, since it still
		    makes the compiler error out anyway...

		include/innocent-pear/kthxbai.h :
		- added visibility("hidden") attribute to kthxbai_impl<...>
		  constructor, to try to prevent it from adding extra symbol
		  table entries for static `x2' variables

		include/innocent-pear/omg.h :
		- now invokes rofl<...>::time(.) with a (scrambled) non-null
		  pointer, since a syscall with a null pointer stands out
		  like a sore thumb in the binary output

		GNUmakefile :
		- now passes `-W' to `readelf'

		lolwutconf/ :
		- bumped to 4ad70fa697

2016-10-11	Strip symbols simply by saying `-s'.  (2)

		GNUmakefile ,
		bin/innocent-pear-front-end.tcc ,
		configure :
		- use `--strip-all' rather than `--strip-unneeded'

		lolwutconf/ :
		- bumped to 6aaf0e0fa7

2016-10-09	Strip symbols simply by saying `-s'.

		configure :
		- now looks for a `strip' or `*-strip' utility for target

		bin/innocent-pear-front-end.tcc :
		- if both `-Xinnocent-pear -doge' and `-s' are specified
		  during a link, now separately runs `strip'/`*-strip' after
		  doing its own postprocessing

		GNUmakefile :
		- added `-s' option for compilation of non-debug test-doge-*
		  test case binaries
		- now tries running `readelf -s' on all test-doge-* binaries
		- now defines innocent_pear_STRIP_FOR_TARGET when compiling
		  host-side utilities

		lolwutconf/ :
		- bumped to ad2e618ec6

2016-10-08	"When all else fails, read the instructions."  (2)

		include/innocent-pear/yarly.h :
		- upped the default function complexity
		- split munging of DefRetVal, to avoid unneeded recursion in
		  the compiler
		- added comment on matching up with include/innocent-pear/
		  host/rly.h

		include/innocent-pear/orly.h :
		- added comment on matching up with include/innocent-pear/
		  host/srsly.h

		include/innocent-pear/host/rly.h :
		- upped the default function complexity, to tally with
		  include/innocent-pear/yarly.h

		share/innocent-pear/doge-i.h :
		- added dummy inline function to get random seeds from
		  innocent-pear-c++ into preprocessed output
		- (re)increased confusion iterations, but not confusion layers

		share/innocent-pear/epic.cc :
		- now uses .st_blksize instead of .st_size as buffer size when
		  reading symlink...

		test/test-dawg-syn.cc ,
		test/test-dawg-syn.good :
		- reduced the number of randomizations

		configure :
		- now tests for command-line utilities used at build time

		GNUmakefile :
		- now only uses readelf, xz, etc. if these exist

		README.md :
		- slightly updated

		lolwutconf/ :
		- bumped to 23fdf9745a

2016-10-07	"When all else fails, read the instructions."

		configure :
		- now tests for prctl(...), PR_GET_DUMPABLE (unused for now),
		  and PR_SET_DUMPABLE

		GNUmakefile :
		- now writes results of tests for prctl(...) et al. to
		  $(config.h.target)

		include/innocent-pear/rofl.h :
		- added rofl<...>::prctl(...)
		- (untested) added some syscall numbers for AArch64

		include/innocent-pear/omg.h :
		- now tries to call rofl<...>::prctl(...)

		include/innocent-pear/kthxbai.h :
		- simplified recursion notation; fixed a bug in the process

		include/innocent-pear/yarly.h :
		- reduced number of recursion levels for terminal constants

		.travis.yml :
		- now sets $CFLAGS_FOR_TARGET appropriately

2016-10-06	Added test for interfacing with C code.

		GNUmakefile :
		- added test-doge-with-c test case, and associated rules and
		  variable definitions

		test/test-doge-with-c.c ,
		test/test-doge-with-c.good :
		- new

2016-10-05	Now with a C (i.e. non-C++) compiler front-end; untested.

		bin/innocent-pear-front-end.tcc :
		- renamed from bin/innocent-pear-c++.cc, and made more generic

		bin/innocent-pear-c++.cc ,
		bin/innocent-pear-cc.cc :
		- new

		configure :
		- now looks for target-side C compiler and probes for its
		  properties

		GNUmakefile :
		- changed to build (and install) C compiler front-end

		.travis.yml :
		- now sets $CC_FOR_TARGET appropriately

		infra/travis-install-deps.sh :
		- now also installs target-side C compiler for tests

		include/innocent-pear/kthxbai.h :
		- removed really (!) redundant condition check

		include/innocent-pear/rofl.h :
		- added rofl<...>::time(.)

		include/innocent-pear/omg.h :
		- may now use rofl<...>::time(.)

		test/test-dawg-syn.cc ,
		test/test-dawg-syn.good :
		- reduced the number of randomizations

		.gitignore :
		- added innocent-pear-cc

		lolwutconf/ :
		- bumped to 7c7d904647

2016-10-04	More, more, more mixing.

		include/innocent-pear/kthxbai.h :
		- now further mixes (garbage) values from omg<...> into
		  computations, via orly<...>

		include/innocent-pear/omg.h :
		- omg<...>::omg(.) now tries to do getpid() or getppid()
		  syscalls if permitted

		include/innocent-pear/yarly.h :
		- _mea culpa_: "redundant condition check" (2016-04-19)
		  turns out to be not so redundant

2016-10-03	"May the forces of evil become confused on the way to your
		 house."  (3)

		include/innocent-pear/kthxbai.h :
		- kthxbai_impl<...> is now a class, not a struct...
		- added kthxbai_impl<...>::special(...), which does nothing
		  at the moment

		include/innocent-pear/lolwut.h :
		- `struct kthxbai_impl' -> `class kthxbai_impl'

		include/innocent-pear/omg.h :
		- omg<...>::omg(.):
		  - now tries to use `rdtsc', on x86-32 and x86-64
		  - now tries to use a (garbage) value in a register without
		    loading anything into it
		  - now tries to do arithmetic on (possibly garbage) values
		  - now gives less probability mass to going straight to
		    kthxbai_impl<...>
		- `struct kthxbai_impl' -> `class kthxbai_impl'

2016-10-02	omg<...>::unsafe() -> omg<...>::special().

		include/innocent-pear/omg.h ,
		share/innocent-pear/doge-i.h :
		- renamed omg<...>::unsafe() to omg<...>::special() to more
		  accurately reflect its semantics

		lolwutconf/ :
		- bumped to d050bc4d84

2016-10-01	"May the forces of evil become confused on the way to your
		 house."  (2)

		include/innocent-pear/omg.h :
		- now tries to use `ldr pc, ...' instruction when compiling
		  for ARM-32 in ARM or Thumb-32 mode

		test/test-orly-1.cc ,
		test/test-orly-1.good ,
		test/test-orly-2.cc ,
		test/test-orly-2.good :
		- split test case test-orly into two test cases, test-orly-1
		  and test-orly-2

		test/test-doge-eh.cc ,
		test/test-doge-eh.sub.cc :
		- split test-doge-eh test case into two modules (but still
		  one test case)

		GNUmakefile :
		- updated per test case changes

2016-09-30	"May the forces of evil become confused on the way to your
		 house."

		include/innocent-pear/omg.h :
		- now adds more random instruction prefixes when compiling
		  for x86-32 or x86-64
		- now tries to use `iretl' instruction, when compiling using
		  g++ for x86-32

2016-09-29	Link in `-latomic'.  (2)

		GNUmakefile :
		- now propagates results of target-side `-latomic' test to
		  compilation of host-side tools

		bin/innocent-pear-c++.cc :
		- ugly hack: now inserts `-latomic' option right before the
		  final doge_i[] module, if applicable -- since the
		  unscrambler may call `-latomic' routines (for i386), we
		  want to place the used routines outside the scrambled part
		  of .text

2016-09-28	Link in `-latomic'.

		configure :
		- now probes for `-latomic' library for both host and target

		lolwutconf/ :
		- bumped to 0afa88f95d

2016-09-27	allow_all -> allow_for_startup, and a bit more.

		include/innocent-pear/bbq.h :
		- renamed innocent_pear::impl::allow_all -> innocent_pear::
		  impl::allow_for_startup, to better reflect its true
		  semantics
		- removed innocent_pear::impl::allow_terminal_unsafes

		include/innocent-pear/rofl.h :
		- in debug mode, rofl<...>::tcflow(, TCOOFF) for each seed
		  will stop logging after being called a few hundred times
		  (unless there is an `unsigned long' overflow...)

		include/innocent-pear/omg.h ,
		share/innocent-pear/doge-01.cc ,
		share/innocent-pear/doge-02.cc ,
		share/innocent-pear/doge-03.cc ,
		share/innocent-pear/doge-04.cc ,
		share/innocent-pear/doge-05.cc ,
		share/innocent-pear/doge-06.cc ,
		share/innocent-pear/doge-07.cc ,
		test/test-kthxbai.cc ,
		test/test-kthxbai-p.cc ,
		test/test-orly.cc ,
		- updated per bbq.h

		share/innocent-pear/moar.cc :
		- tweaked handling of large buffer sizes for calls to
		  KeccakWidth1600_SpongePRG_Feed(...)

2016-09-25	Further split unscrambling.  Fixed x86-64 red zone clobbering.
		Abstracted out pseudorandomness generation.

		share/innocent-pear/doge-i.h :
		- reduced confusion layers
		- added innocent_pear_NEXT

		share/innocent-pear/doge-01.cc ,
		share/innocent-pear/doge-02.cc :
		- reduced confusion layers

		share/innocent-pear/doge-03.cc ,
		share/innocent-pear/doge-04.cc ,
		share/innocent-pear/doge-05.cc ,
		share/innocent-pear/doge-06.cc ,
		share/innocent-pear/doge-07.cc :
		- split from share/innocent-pear/doge-03.cc
		- reduced confusion layers, but increased the number of
		  parts to unscramble
		- now defines dogecoin_t::l_ with `constexpr', not `const'

		share/innocent-pear/doge-45.cc :
		- tweaked code formatting

		share/innocent-pear/omnomnom.lxx :
		- updated to use moar.h rather than directly calling Keccak
		  routines

		bin/innocent-pear-c++.cc :
		- updated per split of doge-03.cc
		- updated to use moar.h rather than directly calling Keccak
		  routines

		include/innocent-pear/kthxbai.h :
		- reduced default number of confusion layers
		- fixed hi_bit(.) logic

		include/innocent-pear/bbq.h :
		- now defines innocent_pear::impl::ops_flags_t constants with
		  `constexpr', not `const'

		include/innocent-pear/omg.h :
		- reduced default number of confusion layers
		- fixed (lack of) scrambling of "/dev/tty" file name
		- fixed x86-64 %rsp-twiddling code to take into account the
		  red zone

		include/innocent-pear/host/moar.h ,
		share/innocent-pear/moar.cc :
		- new

		GNUmakefile :
		- now has moar.h and moar.cc as dependencies; and builds
		  moar.o specially, for use by omnomnom.lxx
		- moved `-DKeccakP200_excluded ...' to moar.h and to
		  compilation rules for Keccak source files
		- now creates target directories if needed, for %.ii rules
		  (et al.) -- so that building away from source tree will
		  work

		test/test-orly.cc :
		- reduced confusion layers
		- added some test functions with Boreal == false and BigBad
		  == false

2016-09-24	"Has anyone ever tasted an `end'?  Are they really bitter?"
		(5)

		GNUmakefile :
		- `make check' now builds test/test-doge.eh.debug

		bin/innocent-pear-c++.cc :
		- now defines macros innocent_pear_DOGE_TAG_NEXT and
		  innocent_pear_DOGE_TAG_2_NEXT when compiling share/
		  innocent-pear/doge-??.cc files

2016-09-23	Fixed bugs in (1) relocation handling (2) building away from
		source tree.  Minor internal enhancements.

		bin/innocent-pear-c++.cc :
		- added `-Xinnocent-pear -exec-prefix=...' and
		  `-Xinnocent-pear -target-exec-prefix=...' options, to
		  facilitate building away from source tree
		- now adds one new seed and one new round of scrambling
		- now defines innocent_pear_DOGE_TAG macro when compiling
		  share/innocent-pear/doge-??.cc files
		- doge-04 -> doge-45

		GNUmakefile :
		- fixed to _really_ allow builds away from source tree
		- doge-04 -> doge-45

		infra/travis-build-and-check.sh :
		- now tries to do build in a separate build-*/ directory

		share/innocent-pear/calm.cc :
		- fixed to _really_ allow builds away from source tree

		share/innocent-pear/doge-i.h :
		- innocent_pear_DOGE and innocent_pear_DOGE_MEMSET no longer
		  require an argument (again!), since now there is
		  innocent_pear_DOGE_TAG
		- added innocent_pear_HERE_START

		share/innocent-pear/doge-01.cc :
		- updated doge-i.h macro calls
		- now unscrambles only doge-02.cc portion

		share/innocent-pear/doge-02.cc :
		- updated doge-i.h macro calls
		- now unscrambles doge-03.cc portion
		- removed unneeded definition of flags2

		share/innocent-pear/doge-03.cc :
		- updated doge-i.h macro calls
		- fixed bug in applying of relocations :-\

		share/innocent-pear/doge-45.cc :
		- renamed from doge-04.cc to doge-45.cc
		- now uses doge-i.h

		share/innocent-pear/doge-98.cc :
		- updated symbol reference for start of scrambled text

		include/innocent-pear/omg.h :
		- fixed bug in pseudorandomness generation

		README.md :
		- now mentions non-support of `-###'

		lolwutconf/ :
		- bumped to e9fababcac

2016-09-22	"Has anyone ever tasted an `end'?  Are they really bitter?"
		(4)

		include/innocent-pear/orly.h :
		- functor passed to orly<...>::wot(...) now needs to accept
		  2 arguments, not 1

		share/innocent-pear/doge-i.h :
		- renamed from share/innocent-pear/doge.h
		- innocent_pear_DOGE and innocent_pear_DOGE_MEMSET now each
		  accept a tag argument

		share/innocent-pear/doge-01.cc :
		- now uses updated doge-i.h

		share/innocent-pear/doge-02.cc :
		- now uses updated doge-i.h
		- now places _.innocent_pear.text.unlikely.start in a
		  separate section, so that g++ will not complain about
		  inconsistent section attributes
		- moved first two routines from doge-03.cc in

		share/innocent-pear/doge-03.cc :
		- now uses updated doge-i.h and orly.h
		- moved first two routines out to doge-02.cc
		- minor tweak

		GNUmakefile :
		- share/innocent-pear/doge.h -> share/innocent-pear/doge-i.h

2016-09-17	"Has anyone ever tasted an `end'?  Are they really bitter?"
		(3)

		.travis.yml :
		- removed armv4-linux-gnueabi test configuration

		README.md :
		- added note on armv4-linux-gnueabi compiler crash

2016-09-16	"Has anyone ever tasted an `end'?  Are they really bitter?"
		(2)

		bin/innocent-pear-c++.cc :
		- factored out the counts of additional modules to compile
		  and link in the case of `-Xinnocent-pear -doge'; to prepare
		  for later refactoring
		- slightly rewrote internal grumpy(...) routine

2016-09-13	"Has anyone ever tasted an `end'?  Are they really bitter?"

		include/innocent-pear/omg.h :
		- omg<...>::unsafe() is now public -- and static -- and can
		  thus be used by outside code

		share/innocent-pear/doge.h :
		- new; partly from doge-03.cc

		share/innocent-pear/doge-01.cc ,
		share/innocent-pear/doge-03.cc :
		- now uses doge.h

		GNUmakefile :
		- added share/innocent-pear/doge.h as an installable file

2016-09-12	Now uses a pseudorandom number generator based on Keccak
		hashing of input files, instead of CRC-64 checksums, to seed
		downstream generators.

		.gitmodules ,
		KeccakCodePackage/ :
		- added submodule for Gilles Van Assche et al.'s
		  KeccakCodePackage (https://github.com/gvanas/
		  KeccakCodePackage); at commit e39f89a449

		GNUmakefile :
		- added rules for building Keccak code
		- bin/innocent-pear-c++ and share/innocent-pear/omnomnom now
		  have Keccak code as dependencies
		- share/innocent-pear/calm no longer needs share/innocent-
		  pear/nomnom.o to be built
		- now _requires_ config.cache to be present to work
		- removed code for including C++ header with mt19937_64

		bin/innocent-pear-c++.cc :
		- now uses KeccakWidth1600_SpongePRG_Instance, instead of
		  mt19937_64, as its PRNG
		- changed `-Wa,--Xinnocent-pear=dogecoin...' option so that
		  it passes a seed to share/innocent-pear/calm

		bin/innocent-pear-dogecoin.cc :
		- removed the dependency on mt19937_64; switched to using a
		  xorshift generator

		share/innocent-pear/calm.cc :
		- now accepts seed from `--Xinnocent-pear-dogecoin...' option
		  instead of computing its own seed

		share/innocent-pear/omnomnom.lxx :
		- now uses KeccakWidth1600_SpongePRG_Instance, instead of
		  mt19937_64, as its PRNG

		share/innocent-pear/nomnom.cc :
		- removed

		include/innocent-pear/host/lolcat.h :
		- removed unneeded file_crc64(...) prototype

		configure :
		- removed check for std::mt19937_64 and boost::mt19937_64

		.gitignore :
		- added `keccak' (actually infra/keccak/)

		.travis.yml :
		- replacing tests for x86-32 target under g++ 4, with tests
		  for x86-32 target under clang++
		- added proper $CXXFLAGS_FOR_TARGET settings for x86-32 target

		README.md :
		- updated bug list

2016-09-10	ohai moar plz

		include/innocent-pear/ohai.h :
		- new

		include/innocent-pear/omg.h ,
		share/innocent-pear/doge-01.cc :
		- changed to use ohai.h

		include/innocent-pear/lolwut.h ,
		include/innocent-pear/rofl.h :
		- now checks existence of __clang__ in addition to checking
		  __GNUC__ and __GNUC_MINOR__

		GNUmakefile :
		- added ohai.h as a dependency and installable

2016-09-09	"Hummingbirds never remember the words to songs."

		share/innocent-pear/doge-01.cc :
		- added frobbing of /dev/tty
		- further reduced layers of operand scrambling

		share/innocent-pear/doge-03.cc :
		- added frobbing of /dev/tty

		include/innocent-pear/omg.h :
		- rearranged logic to hopefully give more weight to
		  (permitted) unsafe operations
		- added frobbing of /dev/tty

		include/innocent-pear/dawg.h :
		- redefined dawg_impl<...> to include a level count in its
		  template parameters
		- added check against infinite template recursion
		- added >> operator for dawg_impl<...> (and dawg<...>)

		include/innocent-pear/yodawg.h :
		- updated to fit new definition of dawg_impl<...>

		include/innocent-pear/rofl.h :
		- added open(...) and close(...) syscalls
		- some tweaks

		lolwutconf/ :
		- bumped to 1cb19518f3

2016-09-04	"It usually takes more than three weeks to prepare a good
		impromptu speech."

		GNUmakefile :
		- now dumps yet smaller portions of compiled test binaries

2016-09-03	Added tests for ARM hard-float target.

		.travis.yml :
		- added tests for armv7-a-linux-gnueabihf target

		infra/travis-install-deps.sh :
		- now handles ARM hard-float targets

		README.md :
		- updated

		lolwutconf/ :
		- bumped to 7000d5d792

2016-09-01	Let static relocations lie.

		bin/innocent-pear-c++.cc :
		- now only passes `-Wa,--Xinnocent-pear=dogecoin' (formerly
		  `-Wa,--Xinnocent-pear=doge') if building position-
		  -independent code

		bin/innocent-pear-dogecoin.cc :
		- now no longer frobs relocations in mergeable sections or
		  sorted sections

		share/innocent-pear/calm.cc :
		- `--Xinnocent-pear=doge' -> `--Xinnocent-pear=dogecoin'

		GNUmakefile :
		- now dumps even smaller portions of compiled test binaries

2016-08-31	Rediagnosed and refixed partly misdiagnosed bug.

		.travis.yml :
		- partially streamlined test matrix...
		- now uses `-static' for most tests, but also includes
		  `-static-libstdc++' for a few targets

		include/innocent-pear/lolwut.h :
		- lolwut_impl<...>:
		  - now narrows Disp2 to 0...0x1000 if compiling with
		    `clang++ -static' for x86-64
		  - added one more __asm(...) barrier at the end of set(...)

		configure :
		- `-fPIC -pie' `-static-libstdc++' -> `-static' in
		  $CXXFLAGS_FOR_TARGET on default

		GNUmakefile :
		- `make check' no longer builds and runs most *.debug tests

		README.md :
		- re-updated bugs list

2016-08-30	"Adde parvum parvo magnus acervus erit."

		.travis.yml :
		- trying target compilation with `-static' (but without
		  `-fPIC -pie'; apparently the two still cannot mix on
		  Linux), as well as `-mcmodel=medium'

		README.md :
		- updated bugs list

2016-08-28	"For far more marvelous is the truth than any artists of the
		past imagined!  ...  What men are poets who can speak of
		Jupiter if he were like a man, but if he is an immense
		spinning sphere of methane and ammonia must be silent?"

		bin/innocent-pear-c++.cc :
		- now scrambles part of .data.rel.ro, and the `dogecoin'
		  array

		configure ,
		GNUmakefile :
		- now tries to detect and output target-side endianness

		share/innocent-pear/doge-03.cc :
		- now unscrambles part of .data.rel.ro
		- now unscrambles and processes the `dogecoin' array without
		  modifying it in place

		share/innocent-pear/doge-04.cc :
		- now defines .innocent_pear.relro.start

		test/test-doge-abs-reloc.cc ,
		test/test-doge-abs-reloc.good :
		- added relocations in read-only section (.data.rel.ro)

		lolwutconf/ :
		- bumped to e4cff39ceb

2016-08-27	"Let sleeping bags lie."

		bin/innocent-pear-c++.cc :
		- now uses slightly fewer temporary files

		include/innocent-pear/host/lolcat.h ,
		share/innocent-pear/sleepier.cc :
		- added sleepier_t::cheshire()

2016-08-26	"A celebrity is a person who is known for his well-knownness."

		include/innocent-pear/orly.h :
		- generalized orly<...>::wut(...) into orly<...>::wot(...)
		  which allows arbitrary operations on data items
		- unrolled main loops in orly<...>::wot(...)

		include/innocent-pear/host/srsly.h :
		- slightly rewrote loop iterating of srsly<...>::wut(...)

2016-08-25	Properly process page permissions.

		bin/innocent-pear-c++.cc :
		- now passes `-z norelro' to linker back-end, since our
		  constructor code is meant to take over relro handling

		bin/innocent-pear-doge.cc :
		- undid change that made all allocatable sections
		  read/write; this is to prevent the ELF linker from lumping
		  everything into a single rwx segment

		include/innocent-pear-rofl.h :
		- rofl<...>::mprotect(, , prot) tries to scramble `prot'
		  argument, and dumps return status when in debug mode

		share/innocent-pear/doge-01.cc :
		- now unprotects from our .text start to our .rodata end,
		  but does not touch .data.rel.ro (which should be read/write
		  at this point anyway)

		share/innocent-pear/doge-02.cc ,
		share/innocent-pear/doge-04.cc ,
		share/innocent-pear/doge-99.cc :
		- marked labels in read-only sections as `extern const' and
		  gave them initializers

		share/innocent-pear/doge-03.cc :
		- now makes .rodata ~ .data.rel.ro r--
		- now makes .data ~ .bss rw-
		- upped scrambling levels

		share/innocent-pear/doge-98.cc :
		- now only makes .text r-x

		README.md :
		- updated description

		lolwutconf/ :
		- bumped to d9025dfe29

2016-08-23	"Loose bits sink chips."

		bin/innocent-pear-doge.cc :
		- now makes all allocatable sections read/write

		share/innocent-pear/doge-01.cc :
		- no longer needs to unprotect .text, .rodata, etc. using
		  mprotect(...)

		share/innocent-pear/doge-03.cc :
		- upped scrambling levels

		share/innocent-pear/doge-98.cc :
		- now unprotects region from .rodata to .data.rel.ro one page
		  at a time, since there might be holes in the memory mapping

		include/innocent-pear/rofl.h :
		- totally redid 0-, 1-, and 2-argument syscalls for ARM Thumb

2016-08-22	"Two heads are more numerous than one."

		GNUmakefile :
		- now dumps smaller portions of compiled test binaries, but
		  does a `readelf -e' on each of them

		include/innocent-pear/orly.h :
		- now spews debug output for orly<...>::wut(...) if
		  innocent_pear_DEBUG is defined

		include/innocent-pear/rofl.h :
		- now spews debug output for rofl<...>::mprotect(...) if
		  innocent_pear_DEBUG is defined
		- redid 2-argument syscalls for ARM under g++ 4...

		share/innocent-pear/doge-01.cc :
		- reduced layers of operand scrambling, to make compilation
		  tractable on my machine  :-/
		- now avoids overlapping rofl<...>::mprotect(...) calls
		- now unprotects up to (our) end of .data.rel.ro

		share/innocent-pear/doge-98.cc :
		- now avoids overlapping rofl<...>::mprotect(...) calls
		- now reprotects up to (our) end of .data.rel.ro

		share/innocent-pear/doge-99.cc :
		- added _.innocent_pear.relro.end

2016-08-21	"The moving cursor writes, and having written, blinks on."

		README.md :
		- updated project and bug descriptions

		configure ,
		.travis.yml :
		- now passes `-static-libstdc++' in $CXX_FOR_TARGET on
		  default

		bin/innocent-pear-dogecoin.cc ,
		share/innocent-pear/doge-03.cc :
		- tweaked creation and processing of R_386_PC32 relocations
		  to properly handle mergeable sections

		share/innocent-pear/doge-i.ld :
		- now also separates out .data.rel relocations -- apparently
		  used in g++ 4.8.4 to refer to RTTI constructs -- from the
		  rest of .data

		include/innocent-pear/rofl.h :
		- trying to fix "`asm' operand has impossible constraints"
		  under g++ 4 when compiling 0-argument syscalls for ARM
		- now marks fewer registers as clobbered when compiling
		  2-argument syscalls for ARM under g++ 4, to reduce
		  register pressure

		include/innocent-pear/orly.h :
		- wut(...) now purposely inhibits alias analysis

		test/test-doge-eh.cc :
		- tweaked code formatting

2016-08-20	So there is bfd_copy_private_header_data(...), and then
		there is bfd_copy_private_bfd_data(...).  ¯\_(ツ)_/¯

		GNUmakefile :
		- now also dumps compiled debug binaries

		bin/innocent-pear-doge.cc :
		- now simply forbids section groups and link-once sections
		  in its input
		- hopefully now correctly handles programs that throw and
		  catch exceptions -- ELF PT_GNU_EH_FRAME segments are now
		  copied
		- now copies a few more bits of a BFD asection from input to
		  output, following GNU objcopy

		bin/innocent-pear-dogecoin.cc :
		- now copies a few more bits of a BFD asection from input to
		  output, following GNU objcopy

		README.md :
		- updated bug list

2016-08-19	"...then lobbest thou thy Holy Hand Grenade of Antioch
		 towards thy foe..."

		bin/innocent-pear-dogecoin.cc :
		- now correctly fishes out section group signatures
		- no longer frobs relocations in link-once sections, group
		  information sections, or group members
		  members

		bin/innocent-pear-c++.cc :
		- now also passes share/innocent-pear/doge-i.ld (with -T) to
		  linker back-end

		bin/innocent-pear-doge.cc :
		- no longer tries to scramble group information sections

		test/test-doge-eh.cc ,
		test/test-doge-eh.good :
		- added new test case; currently fails for x86-64 target

		share/innocent-pear/doge-i.ld :
		- initial version

		share/innocent-pear/doge-n.ld :
		- renamed from share/innocent-pear/doge.ld

		GNUmakefile :
		- updated to use doge-i.ld and doge-n.ld
		- added test-doge-eh test case

		.gitignore :
		- added test-doge-eh and *.debug patterns

2016-08-18	"Don't panic."

		README.md :
		- updated list of bugs :(

2016-08-17	Some provisions for debugging...

		bin/innocent-pear-c++.cc :
		- now accepts `-Xinnocent-pear -debug-doge' option

		include/innocent-pear/rofl.h :
		- now recognizes and acts on innocent_pear_DEBUG macro

		share/innocent-pear/doge-01.cc :
		- moved test of innocent_pear_DEBUG macro to rofl.h
		- upped layers of operand scrambling

		GNUmakefile :
		- added rules for building test-doge and test-doge-abs-reloc
		  test cases in debug mode

		.travis.yml ,
		infra/travis-build-and-check.sh ,
		infra/travis-install-deps.sh :
		- test/infra/ -> infra/

2016-08-16	Fixed one relocation handling bug.  More bugs to go...

		bin/innocent-pear-dogecoin.cc :
		- now uses in-place relocation addends whenever possible,
		  when creating new pc-relative relocations

		GNUmakefile :
		- `make clean' now also removes *.pear.t.?????? temporaries

		share/innocent-pear/doge-03.cc :
		- tweaked code formatting

		include/innocent-pear/rofl.h :
		- hopefully fixed register assignment for 3-argument
		  syscalls in ARM Thumb mode for g++ < 5

2016-08-15	Scrambling of (some) data sections, finally.  (2)

		GNUmakefile :
		- removed share/innocent-pear/doge-05.cc as a dependency
		- now dumps a larger portion of the compiled binaries for
		  test-doge* test cases
		- now no longer passes `-v' to compiler front-end when
		  building test/test-doge-abs-reloc

		bin/innocent-pear-c++.cc :
		- no longer compiles doge-05.cc when in `-Xinnocent-pear
		  -doge' mode
		- string constants are no longer scrambled

		include/innocent-pear/rofl.h :
		- hopefully fixed register assignment for 3-argument
		  syscalls in ARM Thumb mode for g++ >= 5

		share/innocent-pear/doge-01.cc :
		- slightly renamed the constructor routine

		share/innocent-pear/doge-03.cc :
		- merged doge-04.cc into this file
		- separated out the calls to rofl<...>::memset(...) from
		  the routines that do other things
		- rofl<...>::memset(...) should now be called more often too

		share/innocent-pear/doge-04.cc :
		- renamed from share/innocent-pear/doge-05.cc; the original
		  doge-04.cc was merged into doge-03.cc

		share/innocent-pear/doge-98.cc :
		- separated out the call to rofl<...>::memset(...) from
		  everything else

		share/innocent-pear/sleepier.cc :
		- sleepier_t::sleepiest() now no longer bails out if the
		  file to be removed no longer exists

2016-08-14	Scrambling of (some) data sections, finally.

		share/innocent-pear/doge.ld :
		- initial version

		bin/innocent-pear-c++.cc :
		- now scrambles .rodata and .data sections by way of bin/
		  innocent-pear-doge
		- now uses share/innocent-pear/doge.ld

		bin/innocent-pear-dogecoin.cc :
		- now emits section names of the form .innocent_pear.
		  dogecoin.* rather than .rodata.innocent_pear.dogecoin.*
		- now no longer sorts new sections by name, this being done
		  in share/innocent-pear/doge.ld

		share/innocent-pear/calm.cc :
		- now uses bin/innocent-pear-dogecoin if assembler pass is
		  given `--Xinnocent-pear=doge'

		share/innocent-pear/doge-01.cc ,
		share/innocent-pear/doge-03.cc ,
		share/innocent-pear/doge-05.cc ,
		share/innocent-pear/doge-98.cc ,
		share/innocent-pear/doge-99.cc :
		- updated to handle scrambled .rodata and .data sections, as
		  well as absolute relocations

		GNUmakefile :
		- added share/innocent-pear/doge.ld as a dependency

		README.md :
		- well, there goes one bug...

2016-08-12	"Biochemistry is the study of carbon compounds that crawl."

		lolwutconf/ :
		- bumped to 4de7cac154

		configure :
		- modified to use conf_bfd_chk_exists()

		.gitignore :
		- added innocent-pear-dogecoin

2016-08-09	"Going the speed of light is bad for your age."

		bin/innocent-pear-dogecoin.cc :
		- initial version; for later use

		GNUmakefile :
		- changed to compile and install bin/innocent-pear-dogecoin
		  properly

2016-08-07	"The chicken was involved, the pig was committed."

		GNUmakefile :
		- `make' now no longer runs tests like `make check' does
		- fixed duplicate addition of `-Xinnocent-pear -doge -v' to
		  compiler command line for test-orly-wut and test-doge*
		  test cases -- including for old GNU make
		- added share/innocent-pear/lolrus.o as a dependency of
		  bin/innocent-pear-doge

		bin/innocent-pear-doge.cc :
		- factored out string-to-integer parsing to share/innocent-
		  pear/lolrus.cc

		share/innocent-pear/lolrus.cc :
		- initial version

		include/innocent-pear/host/lolcat.h :
		- bug fix: now includes <iostream>
		- added prototype for lolrus(...)

2016-08-06	RAII for managing temporaries.  Refactoring.  Bug fixes.

		GNUmakefile :
		- now uses the new file names for the share/innocent-pear/
		  doge-*.cc modules
		- now dumps (part of) compiled binaries for test-doge* test
		  cases, for debugging

		include/innocent-pear/bbq.h :
		- innocent_pear::impl::pow<...>() is now Always Inline™

		test/infra/travis-install-deps.sh :
		- now also installs xz-utils, to allow use of xz

		share/innocent-pear/sleepier.cc ,
		include/innocent-pear/host/lolcat.h :
		- now defines sleepier_t class instead of sleepier(...) and
		  sleepiest(...) routines

		bin/innocent-pear-c++.cc :
		- now uses the new file names for the share/innocent-pear/
		  doge-*.cc modules
		- now uses sleepier_t class

		bin/innocent-pear-doge.cc ,
		share/innocent-pear/calm.cc :
		- now uses sleepier_t class

		share/innocent-pear/doge-01.cc :
		- renamed from share/innocent-pear/doge-1.cc

		share/innocent-pear/doge-02.cc :
		- renamed from share/innocent-pear/doge-2.cc

		share/innocent-pear/doge-03.cc ,
		share/innocent-pear/doge-04.cc :
		- renamed and split from share/innocent-pear/doge-3.cc

		share/innocent-pear/doge-05.cc :
		- renamed from share/innocent-pear/doge-4.cc

		share/innocent-pear/doge-98.cc :
		- renamed from share/innocent-pear/doge-8.cc

		share/innocent-pear/doge-99.cc :
		- renamed from share/innocent-pear/doge-9.cc

		include/innocent-pear/omg.h :
		- fixed minor bug

2016-08-05	Prevent files from magically materializing due to bash
		completion of makefile targets.  And, other things.

		GNUmakefile :
		- rule for config.cache now gives an error message instead
		  of running ./configure
		- added test-doge-abs-reloc test case
		- added rules for building one bin/innocent-pear-dogecoin
		  (for later use...)

		test/test-doge-abs-reloc.cc ,
		test/test-doge-abs-reloc.good :
		- initial version

		bin/innocent-pear-doge.cc :
		- reformatted wow(...) messages to take up less screen space

		.gitignore :
		- added test-doge-abs-reloc

2016-08-04	There is always another tweak.

		test/test-doge.cc :
		- removed unneeded #include's

2016-08-02	Now shreds (some) intermediate files during build.

		share/innocent-pear/keyboard.cc :
		- moved sleepier(.) out to sleepier.cc

		share/innocent-pear/sleepier.cc :
		- split from keyboard.cc
		- added sleepiest(.)

		share/innocent-pear/calm.cc :
		- now uses sleepiest(.)
		- removed debugging code for assembler pass

		bin/innocent-pear-c++.cc :
		- now uses sleepiest(.)

		bin/innocent-pear-doge.cc :
		- now uses sleepier(.) and sleepiest(.)

		include/innocent-pear/host/lolcat.h :
		- added sleepiest(.) prototype

		configure :
		- now looks for fdatasync(.) host-side

		GNUmakefile :
		- added share/innocent-pear/sleepier.o as a dependency for
		  host-side programs
		- now defines and uses $(RM) for removing files and
		  directories
		- now says in $(config.h.host) whether fdatasync(.) exists
		  host-side

2016-08-01	Assembler back-end wrapper tweak.

		share/innocent-pear/calm.cc :
		- now handles long options for `as' which require separate
		  arguments

2016-07-31	"RAM wasn't built in a day."

		.travis.yml :
		- factored out build command into a separate script

		test/infra/travis-build-and-check.sh :
		- initial version; build command factored out from .travis.yml
		- added test of `./configure --help'

		GNUmakefile :
		- `make uninstall' should now remove host-side utilities
		- split `uninstall' rule into two sub-rules
		- marked `default', `check', etc. targets as `.PHONY'

		bin/innocent-pear-c++.cc :
		- now passes `--Xinnocent-pear=doge' to assembler pass, if
		  `-Xinnocent-pear -doge' is seen

		share/innocent-pear/calm.cc :
		- wrapper for assembler pass now accepts `--Xinnocent-pear=
		  doge', though this option currently does nothing

		lolwutconf/ :
		- bumped to da490e2042

2016-07-30	Tweaks.  (4)

		bin/innocent-pear-c++.cc :
		- now always passes `-fno-integrated-as' to target C++
		  compiler, if supported
		- now ignores any `-fintegrated-as' on input command line

		GNUmakefile :
		- now says in $(config.h.host) whether target compiler has
		  `-fno-integrated-as'
		- no longer specially passes `-fno-integrated-as' to make
		  rule when building .s files for target

2016-07-29	Improved relocation handling.

		bin/innocent-pear-doge.cc :
		- no longer errors out if input has no dynamic relocations

2016-07-28	Tweaks.  (3)

		configure ,
		GNUmakefile ,
		include/innocent-pear/dawg.h ,
		include/innocent-pear/kthxbai.h :
		- target-side C++ variadic template support is now also
		  mandatory

		lolwutconf/ :
		- bumped to 01f15b32fc

2016-07-26	Tweaks.  (2)

		configure ,
		GNUmakefile :
		- host-side C++ variadic template support is now mandatory;
		  so bin/innocent-pear-doge can always be built

		lolwutconf/ :
		- bumped to 3e5b959d52

2016-07-24	"No output has been received in the last 10m0s, this
		potentially indicates a stalled build or something wrong
		with the build itself."

		share/innocent-pear/doge-1.cc :
		- now calls rofl<...>::tcflow(, TCOOFF) on a (compile-time)
		  random fd, not always stdout

		share/innocent-pear/doge-3.cc :
		- bug fix: now calls rofl<...>::tcflow(, TCOON) on stdin and
		  stderr as well

		include/innocent-pear/rofl.h :
		- rofl<...>::ioctl(fd, ...) now also scrambles fd if known to
		  be constant
		- rofl<...>::tcflow(fd, .) no longer scrambles fd if handing
		  over to ioctl(...) :-)

2016-07-23	Beginning of clang++ support.

		configure :
		- now tests if host and target compilers support
		  `-fno-integrated-as', and if target supports `-wrapper'
		- libbfd is now obligatory

		bin/innocent-pear-c++.cc :
		- .ccc -> .cc
		- now supports sending compiler passes to calm.cc via using
		  `-###' rather than `-wrapper'
		- removed `-specs ...'
		- some bug fixes

		bin/innocent-pear-doge.cc :
		- .ccc -> .cc
		- now #define's innocent_pear_HOST_SIDE

		share/innocent-pear/doge-1.cc ,
		share/innocent-pear/doge-3.cc ,
		share/innocent-pear/doge-8.cc ,
		share/innocent-pear/epic.cc ,
		test/*.cc :
		- .ccc -> .cc

		GNUmakefile :
		- .ccc -> .cc
		- now writes results of `-wrapper' test to
		- now adds `-fno-integrated-as' compiler flag when building
		  .s files (host or target), if this flag is supported
		- removed checks for libbfd

		.travis.yml :
		- now also tests with clang++ as host-side compiler, and as
		  target-side compiler for default processor type (x86-64)
		  and x86-32

		share/innocent-pear/keyboard.cc :
		- added two more parameters to keyboard(...) and
		  keyboardest(...)
		- removed keyboard(, )
		- made keyboarder(...) local to module
		- now #define's innocent_pear_HOST_SIDE

		share/innocent-pear/nomnom.cc :
		- now #define's innocent_pear_HOST_SIDE
		- now includes derp.h via bbq.h, as it should

		share/innocent-pear/calm.cc :
		- now handles clang-style compiler passes
		- updated keyboard(...) and keyboardest(...) calls
		- now #define's innocent_pear_HOST_SIDE

		share/innocent-pear/calm.spec :
		- removed

		include/innocent-pear/bbq.h :
		- tweaked calculations of multiplicative inverses

		include/innocent-pear/kthxbai.h :
		- tweaked calculations of multiplicative inverses
		- `arplw' -> `arpl', as clang++ does not understand `arplw'

		include/innocent-pear/lolwut.h :
		- fixed or disabled __asm constructs which do not work well
		  under clang++

		include/innocent-pear/host/lolcat.h :
		- updated per share/innocent-pear/keyboard.cc
		- now includes derp.h via bbq.h, as it should

		include/innocent-pear/rofl.h :
		- now defines rofl<...>::ptrace_raw(...) under Linux even
		  if rofl<...>::ptrace_lib(...) is undefined...

		include/innocent-pear/omg.h :
		- tweaked output of signal-unsafe and terminal-unsafe code

		test/infra/travis-install-deps.sh :
		- now installs clang if specified as target-side compiler

		lolwutconf/ :
		- bumped to 94151c6e6f

		.gitignore :
		- added *.tmp

2016-07-20	Somewhat minor fixes.

		include/innocent-pear/omg.h :
		- no longer defines omg<...>::Which2 and omg<...>::Which3
		  when unneeded

		include/innocent-pear/rofl.h :
		- fixed silly syntax errors which rear their heads when
		  TCXONC is absent

		lolwutconf/ :
		- bumped to cc40606132

2016-07-19	"There is nothing new under the sun, but there are lots of
		 old things we don't know yet."

		configure :
		- now also looks for mt19937_64 in standard C++ headers
		- now checks that at least one of {std::mt19937_64, boost::
		  mt19937_64}, one of {std::uint64_t, ::uint64_t}, and one
		  of {std::uintptr_t, ::uintptr_t} are defined

		GNUmakefile :
		- now makes $(config.h.host) rope in mt19937_64 definition

		share/innocent-pear/omnomnom.lxx :
		- now looks for mt19937_64 definition as detected by
		  `configure' script

		lolwutconf/ :
		- bumped to 66b1103cf5

		test/infra/travis-install-deps.sh :
		- removed libboost-dev installation

		README.md :
		- added `git clone ...' command, to show `--recursive' option

2016-07-15	Flow control.

		include/innocent-pear/rofl.h :
		- implemented rofl<...>::tcflow(...)
		- other minor tweaks

		include/innocent-pear/omg.h :
		- now tries to call rofl<...>::tcflow(, TCOOFF) if allowed

		share/innocent-pear/doge-1.ccc ,
		- now uses rofl<...>::tcflow(...)
		- tweaked mangling of address via ptrace(...)

		share/innocent-pear/doge-3.ccc :
		- now uses rofl<...>::tcflow(...)

		configure :
		- now probes _values_ of TCOOFF, TCOON, TCXONC, TIOCSTOP, and
		  TIOCSTART

		GNUmakefile :
		- now defines more macros in $(config.h.target)

		lolwutconf/ :
		- bumped from 684f245d41 to 905237db95

2016-07-14	Save the namespace!

		include/innocent-pear/rofl.h :
		- now no longer includes <sys/ioctl.h>; this is to avoid
		  polluting the macro namespace with ioctl numbers

		GNUmakefile :
		- fixed typo: $(conf_Have_cxx_typ_struct__bbfd) -> $(conf_
		  Have_cxx_typ_struct_bbfd)

		bin/innocent-pear-doge.ccc :
		- removed all string scrambling, to save compilation time

2016-07-12	Mostly compatibility fixes.

		configure :
		- now checks type of host-side wchar_t (again)
		- now looks for std::mbrtowc(...) and ::mbrtowc(...), in
		  case host implements neither mbrtoc16(...) nor
		  mbrtoc32(...)
		- now checks for __asm goto(...) support for both host and
		  target
		- now includes both <sys/types.h> and <sys/ptrace.h> when
		  probing for ptrace(...) constants
		- removed probing for PT_GETREGS and PT_SETREGS
		- added probing for tcflow(...) and friends

		GNUmakefile :
		- $(conf_Have_cxx_typ_struct_x20_bfd) -> $(conf_Have_cxx_
		  typ_struct__bbfd), following lolwutconf/ update
		- modified $(config.h.host) and $(config.h.target) outputs
		  per changes in `configure'
		- added rule for compiling bin/*.ii to bin/*.s, for debugging

		lolwutconf/ :
		- bumped from 3473dd81a3 to 684f245d41

		include/innocent-pear/dawg.h :
		- moved operator<<(...) into innocent_pear::impl:: namespace

		include/innocent-pear/kthxbai.h ,
		include/innocent-pear/lolwut.h ,
		include/innocent-pear/rofl.h :
		- minor clang compatibility tweaks

		include/innocent-pear/omg.h :
		- now uses __asm goto(...) only when supported

		share/innocent-pear/omnomnom.lxx :
		- now uses mbrtowc(...) if host and target use the same
		  wchar_t, instead of mbrtoc16(...) or mbrtoc32(...)

2016-07-10	"This error code has no purpose."

		include/innocent-pear/bbq.h :
		- starting to include ops_flags_t flags indicating doctored
		  states which code can be assumed to be running under

		include/innocent-pear/omg.h :
		- now uses rofl<...> to issue syscalls, instead of calling
		  C library functions
		- redid pseudorandom state advancements

		include/innocent-pear/rofl.h :
		- `syscall' instructions on x86-64 are now correctly marked
		  as clobbering %rcx and %r11
		- added getpid(), getppid(), kill(...), and ioctl(...) to
		  rofl<...>
		- now properly forward-references kthxbai<...>

		test/test-dawg-syn.ccc ,
		test/test-dawg-syn.good :
		- reduced stress-testing to save memory during compilation

		test/test-orly.ccc :
		- added allow_all tests

		README.md :
		- now focuses on the command line interface

2016-07-08	armv4t workaround, and value splitting.

		include/innocent-pear/rofl.h :
		- worked around register allocation issue in rofl_impl_
		  syscall<...>::syscall(...) when compiling for armv4t

		include/innocent-pear/kthxbai.h :
		- kthxbai<...> can now split integer values into parts

2016-07-06	Much saner pseudorandomness, and more for ptrace(...).

		include/innocent-pear/bbq.h :
		- now uses uint64_t instead of uint_least64_t
		- innocent_pear::impl::update_outer(...) now needs one more
		  parameter to select the pseudorandom generator

		GNUmakefile :
		- now uses uint64_t instead of uint_least64_t
		- $(conf_Have_cxx_typ_struct_bfd) ->
		  $(conf_Have_cxx_typ_struct_x20_bfd)

		bin/innocent-pear-c++.ccc ,
		include/innocent-pear/host/lolcat.h ,
		share/innocent-pear/calm.ccc ,
		share/innocent-pear/keyboard.ccc ,
		share/innocent-pear/nomnom.cc :
		- now uses uint64_t instead of uint_least64_t

		configure :
		- now looks for uint64_t instead of uint_least64_t

		include/innocent-pear/dawg.h ,
		include/innocent-pear/host/rly.h ,
		include/innocent-pear/host/srsly.h ,
		include/innocent-pear/kthxbai.h ,
		include/innocent-pear/lolwut.h ,
		include/innocent-pear/omg.h ,
		include/innocent-pear/orly.h ,
		include/innocent-pear/rofl.h ,
		include/innocent-pear/yarly.h :
		- updated update_outer(...) calls, and internal templates, to
		  select the pseudorandom generator per the number of levels

		share/innocent-pear/doge-1.ccc :
		- upped the number of recursion layers for ptrace(...) call

2016-07-03	Minor cleanup.

		include/innocent-pear/yarly.h :
		- removed unneeded yarly_impl<...>::NewNewState definition

2016-07-01	"An apple a day makes 365 apples a year."

		GNUmakefile :
		- updated to use unambiguous C++ name escaping scheme in
		  lolwutconf/

		lolwutconf/ :
		- bumped from commit eeb2d750ff to 3473dd81a3

2016-06-17	A bit more template parameter checking.

		include/innocent-pear/yarly.h :
		- now checks that type T in yarly<, T, ...> is legitimate

2016-06-12	Some template parameter checking.

		include/innocent-pear/kthxbai.h :
		- now checks that type T in kthxbai<, T, ...> is legitimate

2016-06-10	Now scrambles almost the whole text section (on Linux).

		GNUmakefile :
		- added share/innocent-pear/doge-3.ccc and share/innocent/
		  doge-4.cc to host-side installables

		bin/innocent-pear-c++.ccc :
		- now compiles and passes doge-3.o and doge-4.o to the g++
		  front-end
		- now scrambles output executable's text section in two passes

		share/innocent-pear/doge-1.ccc :
		- unscramble() is now in .text.unlikely, not .text.startup
		- now unscrambles from .text.unlikely (after itself) to
		  .text.hot
		- now unprotects memory from .text.unlikely to .text.end

		share/innocent-pear/doge-2.cc :
		- tweaked formatting

		share/innocent-pear/doge-3.ccc ,
		share/innocent-pear/doge-4.cc :
		- initial version

		share/innocent-pear/doge-8.ccc :
		- now reprotects memory from .text.unlikely to .text.end

		share/innocent-pear/doge-9.cc :
		- now marks ends of .text.hot and .gnu.linkonce.t.*

		test/test-doge.ccc ,
		test/test-doge.good :
		- added some action into main()

		include/innocent-pear/omg.h :
		- fixed `mov's from %cs into memory for x86-64

2016-06-04	"Anybody can win, unless there happens to be a second entry."

		bin/innocent-pear-c++.ccc :
		- now uses _.innocent_pear.text.unlikely.start rather than
		  _.innocent_pear.text.startup.start

		bin/innocent-pear-doge.ccc :
		- now checks for _dynamic_ relocations within the area to frob

		share/innocent-pear/doge-1.ccc :
		- moved unscrambling routine from .text.startup into
		  .text.unlikely, which occurs first per the default ld script
		- now uses _.innocent_pear.text.unlikely.start rather than
		  _.innocent_pear.text.startup.start

		share/innocent-pear/doge-2.cc :
		- now also defines _.innocent_pear.text.unlikely.start

2016-05-27	Name change: Biting Pear is now Innocent Pear.

		.gitignore ,
		GNUmakefile ,
		README.md ,
		test/test-dawg-syn.ccc ,
		test/test-dawg.ccc ,
		test/test-doge.ccc ,
		test/test-kthxbai-p.ccc ,
		test/test-kthxbai.ccc ,
		test/test-orly-wut.ccc ,
		test/test-orly-wut.ld ,
		test/test-orly.ccc ,
		test/test-yodawg-syn.ccc ,
		test/test-yodawg.ccc :
		- biting pear -> innocent pear

		bin/innocent-pear-c++.ccc :
		- renamed from bin/biting-pear-c++.ccc
		- biting pear -> innocent pear

		bin/innocent-pear-doge.ccc :
		- renamed from bin/biting-pear-doge.ccc
		- biting pear -> innocent pear

		include/innocent-pear/omg.h :
		- moved from include/biting-pear/ to include/innocent-pear/
		- on x86-32, now emits `int $0x80' as junk instruction
		  instead of `call *%gs:0x10'
		- biting pear -> innocent pear

		include/innocent-pear/bbq.h ,
		include/innocent-pear/dawg.h ,
		include/innocent-pear/doge.h ,
		include/innocent-pear/host/lolcat.h ,
		include/innocent-pear/host/rly.h ,
		include/innocent-pear/host/srsly.h ,
		include/innocent-pear/kthxbai.h ,
		include/innocent-pear/lolwut.h ,
		include/innocent-pear/nowai.h ,
		include/innocent-pear/orly.h ,
		include/innocent-pear/rofl.h ,
		include/innocent-pear/yarly.h ,
		include/innocent-pear/yodawg.h :
		- moved from include/biting-pear/ to include/innocent-pear/
		- biting pear -> innocent pear

		share/innocent-pear/calm.ccc ,
		share/innocent-pear/doge-1.ccc ,
		share/innocent-pear/doge-2.cc ,
		share/innocent-pear/doge-8.ccc ,
		share/innocent-pear/doge-9.cc ,
		share/innocent-pear/keyboard.ccc ,
		share/innocent-pear/nomnom.cc ,
		share/innocent-pear/omnomnom.lxx :
		- moved from share/biting-pear/ to share/innocent-pear/
		- biting pear -> innocent pear

2016-05-23	ptrace(...) support, mainly for some Linux/* platforms.

		configure :
		- now tries to detect whether ptrace(...) is defined and
		  implemented, and whether PT_TRACE_ME, PT_GETREGS,
		  PT_SETREGS, PT_READ_{I, D, U} are defined

		GNUmakefile :
		- now writes ptrace(...) detection macro definitions in
		  $(config.h.target)

		include/biting-pear/rofl.h :
		- now defines biting_pear::rofl::ptrace(...)
		- fixed compilation problem with biting_pear::impl::
		  rofl_impl_mprotect<...>

		share/biting-pear/doge-1.ccc :
		- now tries to mix results of ptrace(PT_TRACE_ME,,,) into
		  computation

		lolwutconf/ :
		- bumped from commit 9272622875 to eeb2d750ff

2016-05-15	Very slight tweak in the directory structure.

		test/infra/travis-install-deps.sh :
		- moved from test/

		.travis.yml :
		- updated path to travis-install-deps.sh

2016-05-08	"Business will be either better or worse."

		include/biting-pear/rofl.h :
		- can now scramble syscalls of <= 3 arguments on ARM Thumb
		- removed special casing of x86-64 syscall scrambling for
		  4, 5, and 6 arguments --- these need further testing
		- added rofl<...>::clear_cache(...); rofl<...>::memset(.) now
		  uses it

		share/biting-pear/doge-1.ccc :
		- now uses rofl<...>::clear_cache(...)

2016-05-01	"... the impacts of this option are callees may waste some
		stack space, misbehave or jump to a random location."

		include/biting-pear/lolwut.h :
		- tweaked impl::lolwut_impl<...>::set(, 2) to split the two
		  instructions for reading the GOT into two __asm commands

		include/biting-pear/rofl.h :
		- rofl_impl_syscall<...>::re_arg(.) now also casts `enum'
		  arguments appropriately

		lolwutconf/ :
		- bumped from commit 69104ce926 to 9272622875

		test/travis-install-deps.sh :
		- now recognizes a few more specific CPU types for x86-32

2016-04-30	g++ 5 compatibility.

		include/biting-pear/lolwut.h :
		- fixed scrambling of library function addresses under g++ 5
		  for x86-32
		- now does a `#pragma message' when compiling under buggy
		  g++ for ARM

		include/biting-pear/rofl.h :
		- can now scramble syscalls on x86-32 and x86-64, and
		  partially scramble syscalls on other platforms
		- added rofl<...>::mprotect(...)

		share/biting-pear/doge-1.ccc ,
		share/biting-pear/doge-8.ccc :
		- now uses rofl<...>::mprotect(...)

		share/biting-pear/omnomnom.lxx :
		- fixed handling of ?<...> to prevent generated numbers from
		  being output before a preprocessor directive on the same
		  line

		GNUmakefile :
		- rule for include/biting-pear/derp.h (and .../host/derp.h)
		  now pulls ::uintptr_t or std::uintptr_t into biting_pear::
		  impl namespace

		configure :
		- added probe of ::uintptr_t and std::uintptr_t for target
		- removed host endianness check

		.travis.yml :
		- added environment settings for using g++ 5

		test/travis-install-deps.sh :
		- now tries to install g++ 5 if .travis.yml says to
		- added `flex' as a prerequisite package

2016-04-19	"And he was clad in cote and hood of grene."  (2)

		include/biting-pear/lolwut.h :
		- position-independent munging of function pointers now
		  works properly on x86-32

		include/biting-pear/omg.h :
		- fixed operator precedence bug
		- minor fix:  added proper "cc" clobbers for x86-32, x86-64,
		  and ARM

		include/biting-pear/kthxbai.h :
		- minor fix:  added proper "cc" clobber for x86-32 `arplw'

		include/biting-pear/host/rly.h :
		- fixed default parameter values in rly<T, Levels>::
		  operator()(...)

		include/biting-pear/yarly.h :
		- removed redundant condition check

2016-04-17	"And he was clad in cote and hood of grene."

		share/biting-pear/doge-8.ccc :
		- munged call to mprotect(...)
		- added optimize("no-reorder-blocks") attribute for the
		  wiping routine

2016-04-14	Memory wiping on ARM.

		include/biting-pear/rofl.h :
		- specific implementations of biting_pear::rofl<...> for ARM
		- slight tweak of biting_pear::rofl<...> for x86-32 and
		  x86-64

2016-04-12	ARMv4 workaround; added ARMv4t target.

		include/biting-pear/lolwut.h :
		- added workaround for g++ 4.7 bug triggered when compiling
		  for ARMv4 sans Thumb

		.travis.yml :
		- added armv4t-linux-gnueabi target platform
		- reordered target platforms

2016-04-11	Improved memory wiping on x86-32 and x86-64.

		include/biting-pear/rofl.h :
		- initial version

		share/biting-pear/doge-8.ccc :
		- renamed from doge-8.cc
		- now uses biting_pear::rofl<...>

		bin/biting-pear-c++.ccc :
		- share/biting-pear/doge-8.cc -> share/biting-pear/doge-8.ccc

		GNUmakefile :
		- added include/biting-pear/rofl.h as a dependency
		- share/biting-pear/doge-8.cc -> share/biting-pear/doge-8.ccc

		.travis.yml :
		- added armv4-linux-gnueabi target platform

2016-03-27	Split lolwutconf into its own project.

		lolwutconf/* :
		- split into a different GitHub project, https://github.com/
		  tkchia/lolwutconf

		.gitmodules :
		- initial version

		.travis.yml ,
		test/travis-install-deps.sh :
		- added i686-linux-gnu target platform

2016-03-26	Trying out Travis CI.

		.travis.yml ,
		test/travis-install-deps.sh :
		- initial version

		bin/biting-pear-doge.ccc :
		- removed (not-very-useful) scrambling of BFD function names
		  in error messages

		include/biting-pear/kthxbai.h :
		- fixed use of arplw instruction for x86-32

		README.md :
		- added link to Travis build status

2016-03-21	Tweaks.

		bin/biting-pear-c++.ccc :
		- `-Xbiting-pear -doge' now invokes biting-pear-c++
		  recursively, and passes -v to recursive subprocesses

		share/biting-pear/doge-1.ccc :
		- share/biting-pear/doge.cc ~> share/biting-pear/doge.ccc
		- added confusion

		GNUmakefile :
		- share/biting-pear/doge.cc ~> share/biting-pear/doge.ccc

2016-03-15	Beefed up on the documentation a bit.

		README.md :
		- added `-Xbiting-pear -doge' option for `biting-pear-c++'
		- added `--target-dir=...' option for `configure'
		- corrected C++ usage to use `#include <...>', not `#include
		  "..."'

2016-03-13	ELF/ARM assembly tweak.

		include/biting-pear/lolwut.h :
		- ELF/ARM code now uses `.subsection ...' and `.previous'
		  instead of `.pushsection ...' and `.popsection' to emit
		  relocated constants, to allow these constants to appear in
		  text sections other than `.text'

		GNUmakefile :
		- minor debugging patch

2016-03-12	Now implements `-Xbiting-pear -doge'!

		GNUmakefile :
		- got `-Xbiting-pear -doge' working
		- added test-doge test case

		bin/biting-pear-c++.ccc :
		- got `-Xbiting-pear -doge' working

		include/biting-pear/doge.h ,
		share/biting-pear/doge-1.cc ,
		share/biting-pear/doge-2.cc ,
		share/biting-pear/doge-8.cc ,
		share/biting-pear/doge-9.cc ,
		test/test-doge.ccc ,
		test/test-doge.good :
		- initial version

		configure :
		- added check for __attribute__((constructor(.))) support
		- turned off check for overridable __libc_csu_init(...)

		lolwutconf/c++.target.inc :
		- added conf_cxxt_probe_ctor_priority()

		share/biting-pear/epic.ccc :
		- fixed curious(.) to call lstat(...) instead of stat(...)

		.gitignore :
		- added test-doge

2016-03-08	Squirrel!  (2)

		configure ,
		lolwutconf/c++.target.inc :
		- now tries to detect if target compiler produces shared or
		  static executables

		GNUmakefile :
		- now defines biting_pear_DYN_LD_CXX_TARGET macro for
		  host-side C++ files
		- fixed separation of host-side rules and target-side rules

		bin/biting-pear-c++.ccc :
		- now defines biting_pear_DYN_LD_CXX_TARGET macro for
		  target-side C++ files, when using `-Xbiting-pear -doge'

2016-03-07	Compiler wrapper front-end now understands and processes
		`-Xbiting-pear -doge'.  Back-end, not so much.

		bin/biting-pear-c++.ccc :
		- now processes `-Xbiting-pear -doge'

		include/biting-pear/host/lolcat.h ,
		share/biting-pear/calm.ccc ,
		share/biting-pear/keyboard.ccc :
		- factored out keyboard(...), keyboarder(...),
		  keyboardest(...), and sleepier(...) from share/biting-
		  pear/calm.ccc

		share/biting-pear/nomnom.cc :
		- bug fix: file_crc64(...) now returns init_crc instead of 0
		  if the file cannot be opened

		GNUmakefile :
		- now defines biting_pear_CXXFLAGS_FOR_TARGET in
		  $(config.h.host)
		- updated dependencies for bin/biting-pear-c++ and share/
		  biting-pear/calm

2016-03-04	Squirrel!

		include/biting-pear/host/lolcat.h ,
		share/biting-pear/epic.ccc :
		- added squirrel(...)

		bin/biting-pear-doge.ccc ,
		share/biting-pear/calm.ccc :
		- now uses squirrel(...); removed all direct dealings with
		  std::cerr

		bin/biting-pear-c++.ccc :
		- now uses squirrel(...); removed all direct dealings with
		  std::cerr
		- fixed glitch in handling `-Xbiting-pear -doge'
		- fixed glitch in handling `-c', `-S', and `-E'

		GNUmakefile :
		- tweaked test output

2016-03-03	Ad astra per alas porci.  (6)

		include/biting-pear/host/lolcat.h :
		- initial version; declarations split and modified from bin/
		  biting-pear-doge.ccc

		bin/biting-pear-c++.ccc :
		- changed `-Xbiting-pear prefix=...' and `-Xbiting-pear
		  target-prefix=...' to `-Xbiting-pear -prefix=...' and
		  `-Xbiting-pear -target-prefix=...'
		- added `-Xbiting-pear -doge', still unimplemented
		- refactored per lolcat.h

		bin/biting-pear-doge.ccc ,
		share/biting-pear/calm.ccc ,
		share/biting-pear/nomnom.cc :
		- refactored per lolcat.h

		share/biting-pear/epic.ccc :
		- renamed from epic.cc to epic.ccc
		- refactored per lolcat.h

		GNUmakefile :
		- changed `-Xbiting-pear prefix=...' and `-Xbiting-pear
		  target-prefix=...' to `-Xbiting-pear -prefix=...' and
		  `-Xbiting-pear -target-prefix=...'
		- modified biting-pear-doge invocation not to use temporary
		  file name
		- fixed dependencies

2016-02-29	Ad astra per alas porci.  (5)

		configure ,
		lolwutconf/c++.target.inc :
		- now checks if target platform uses a __libc_csu_init(...)
		  that is overridable

		lolwutconf/configure.inc :
		- slightly reformatted comments

2016-02-28	Yo doge, we herd you like doge...

		bin/biting-pear-doge.ccc :
		- fixed bug causing BFD internal errors
		- now atomically creates output file

2016-02-27	"Praise doge."

		test/test-orly-wut.ccc ,
		test/test-orly-wut.ld ,
		test/test-orly-wut.good :
		- initial version

		include/biting-pear/host/srsly.h ,
		include/biting-pear/orly.h :
		- fixed rather dumb bug in wut(...) state initialization

		include/biting-pear/kthxbai.h :
		- fixed namespacing glitch for forward declaration of
		  biting_pear::omg

		include/biting-pear/lolwut.h :
		- fixed lolwut(, 3) case for ARM

		GNUmakefile :
		- added test-orly-wut test case
		- fixed compilation of test cases

		.gitignore :
		- added test-orly-wut

2016-02-26	Confusion and enhancements.  (3)

		include/biting-pear/lolwut.h :
		- x86-64:
		  - simplified code for deriving `leaq' displacement
		  - lowered threshold for splitting displacement into two
		  - improved comments

2016-02-25	Confusion and enhancements.  (2)

		include/biting-pear/kthxbai.h :
		- now obscures addresses of constants emitted in read-only
		  and read/write data sections

		include/biting-pear/lolwut.h :
		- improved comments
		- x86-64 `leaq' inline assembly statements are no longer
		  marked as modifying the condition flags, while x86-32
		  `addl' statements are thus marked
		- added handling of addresses of static constants

		GNUmakefile :
		- added `share/biting-pear/%.s: share/biting-pear/%.ii' rule
		  for debugging

2016-02-24	Confusion and enhancements.

		bin/biting-pear-doge.ccc :
		- now allows relocations in object file being frobbed ---
		  only the frobbed section needs to be relocation-free

		include/biting-pear/kthxbai.h :
		- now deliberately emits constants in static read-only and
		  read/write data sections

		include/biting-pear/orly.h :
		- added orly<...>::wut(...)

		GNUmakefile :
		- fixed `%.s: %.ccc' rule

2016-02-21	Renamed test cases.

		test/test-kthxbai.ccc ,
		test/test-kthxbai.good :
		- renamed test-1 to test-kthxbai

		test/test-kthxbai-p.ccc ,
		test/test-kthxbai-p.good :
		- renamed test-2 to test-kthxbai-p

		test/test-orly.ccc ,
		test/test-orly.good :
		- renamed test-3 to test-orly

		test/test-dawg.ccc ,
		test/test-dawg.good :
		- renamed test-extra-1 to test-dawg

		test/test-yodawg.ccc ,
		test/test-yodawg.good :
		- renamed test-extra-2 to test-yodawg

		test/test-dawg-syn.ccc ,
		test/test-dawg-syn.good :
		- renamed test-extra-3 to test-dawg-syn

		test/test-yodawg-syn.ccc ,
		test/test-yodawg-syn.good :
		- renamed test-extra-4 to test-yodawg-syn

		GNUmakefile ,
		.gitignore :
		- updated

2016-02-20	Some x86 and x86-64 enhancements, and a bit more.

		GNUmakefile :
		- updated %.s rule

		include/biting-pear/omg.h :
		- now adds a random prefix before `retl'/`retq'/`lretl'/
		  `lretq' on x86 and x86-64
		- now also adds junk bytes for x86-64

		test/test-extra-3.ccc :
		- really stress-test...

		test/test-extra-3.good :
		- updated

		bin/biting-pear-c++.ccc :
		- now sets $BITING_PEAR_DRIVER_CXX, for later use

2016-02-14	Position-independent executable support.

		configure :
		- now includes `-pie' in $CXXFLAGS and $CXXFLAGS_FOR_TARGET
		  on default

		include/biting-pear/lolwut.h :
		- fixed handling of function pointers for x86-64 so that it
		  works work `-pie'
		- fixed precedence bug in lolwut<...>::operator T *()

		include/biting-pear/omg.h :
		- fixed a minor assembly bug in omg_impl_0<..., 0u>

2016-02-11	Ad astra per alas porci.  (4)

		include/biting-pear/omg.h :
		- now uses only `bx' and `blx' in ARM code when compiling
		  for the appropriate platforms

2016-02-10	Ad astra per alas porci.  (3)

		include/biting-pear/kthxbai.h :
		- added arplw instruction for x86-32

		include/biting-pear/omg.h :
		- fixed mov %cs, ... assembly glitch for x86-32

		GNUmakefile :
		- fixed glitch in compiling bin/biting-pear-doge.ccc

2016-02-09	Ad astra per alas porci.  (2)

		bin/biting-pear-doge.ccc ,
		GNUmakefile ,
		.gitignore :
		- share/biting-pear/doge.ccc -> bin/biting-pear-doge.ccc

2016-02-08	Ad astra per alas porci.

		share/biting-pear/doge.ccc :
		- now requires a `seed' argument

2016-02-04	License change.  Indirect jumps, continued.

		include/biting-pear/omg.h :
		- try to move %cs read further away from its use

		test/test-extra-3.ccc :
		- now creates several "Hello, world!" strings to stress-test
		  the scrambling

		test/test-extra-3.good :
		- updated

		LICENSE :
		- changed to the GNU GPL v3, for releases from here on

2016-02-03	Yet another type of indirect jump.

		include/biting-pear/omg.h :
		- added far returns

2016-01-31	A bit more refactoring.

		share/biting-pear/calm.ccc :
		- restructured code for invoking cc1plus and echoing command
		  line arguments

2016-01-27	Slightly better documentation.

		README.md :
		- added some installation instructions

2016-01-24	A bit of refactoring.

		GNUmakefile ,
		bin/biting-pear-c++.ccc ,
		share/biting-pear/calm.ccc :
		- factored out shocked(.) and curious(...) to share/biting-
		  pear/epic.cc

		share/biting-pear/epic.cc :
		- initial version; split from share/biting-pear/calm.ccc

2016-01-23	Nice wrapper.

		.gitignore :
		- added *.ii and calm, removed nomnom

		GNUmakefile :
		- updated to build and use wrapper
		- now preprocesses to .ii files instead of .i files
		- now builds internal passes from share/biting-pear/ rather
		  than libexec/biting-pear/
		- $(config.h.host) and $(config.h.target) now depend on
		  config.cache
		- now defines biting_pear::impl::getenv(.) in $(config.h.host)
		- fixed installation of host files

		bin/biting-pear-c++.ccc ,
		share/biting-pear/calm.ccc ,
		share/biting-pear/calm.spec :
		- initial version

		configure :
		- now probes for secure_getenv(.)

		share/biting-pear/doge.ccc :
		- moved from libexec/biting-pear/doge.ccc

		share/biting-pear/nomnom.cc :
		- moved from libexec/biting-pear/nomnom.cc
		- is now a module (used by calm.ccc) rather than a
		  stand-alone program

		share/biting-pear/omnomnom.lxx :
		- moved from libexec/biting-pear/omnomnom.lxx
		- now uses a default seed if no seed is specified, rather
		  than a (half-baked) random seed

		include/biting-pear/omg.h ,
		lolwutconf/configure.inc :
		- minor fixes

2016-01-09	Touch-ups.

		GNUmakefile :
		- now uses $conf_Host_exec when running $CXX_FOR_TARGET
		- changed handling of target-side wchar_t
		- `make clean' no longer zaps config.cache
		- fixed bug in #define of biting_pear_decltype

		configure :
		- now looks for mbrtoc16(...) and mbrtoc32(...) in
		  <cuchar> and <uchar.h>

		libexec/biting-pear/omnomnom.lxx :
		- changed handing of target-side wchar_t

		lolwutconf/configure.inc :
		- now looks for `seq' program
		- now tries to derive target installation directory
		  (--target-prefix=) more intelligently, with a
		  conf__find_good_runtime_prefix() function
		- now makes sure that host prefix (--prefix=) is absolute
		- other minor fixes

		lolwutconf/c++.common.inc :
		- now uses conf__find_good_runtime_prefix() when determining
		  host/target program executor command line

		lolwutconf/c++.inc :
		- added conf_cxx_probe_func()

		lolwutconf/c++.target.inc :
		- now uses $conf_Host_exec when running $CXX_FOR_TARGET
		- fixed bug in conf_cxxt_probe_wchar_typ()

2016-01-03	Canadian cross.

		.gitignore :
		- updated

		GNUmakefile :
		- updated for "Canadian cross" setup
		- updated names of helper programs
		- now uses $(conf_Srcdir) etc. instead of $(srcdir) etc.

		configure :
		- updated for "Canadian cross" setup
		- now probes precise type of wchar_t for host and target

		lolwutconf/c++.common.inc :
		- initial version; some routines split from lolwutconf/
		  c++.inc

		lolwutconf/c++.inc :
		- updated for "Canadian cross" setup
		- moved some logic out to lolwutconf/c++.common.inc
		- conf_cxx_probe_endianness() now properly cleans up
		  temporary file
		- added conf_cxx_probe_wchar_typ()

		lolwutconf/c++.target.inc :
		- initial version; much code duplicated from lolwutconf/
		  c++.inc

		lolwutconf/configure.inc :
		- updated for "Canadian cross" setup
		- now uses $(conf_Srcdir) etc. instead of $(srcdir) etc.
		- fixed silly bug in initial `unset'
		- conf__mktemp() no longer uses `local -' --- bash
		  does not understand it

		lolwutconf/lolwutconf.mk :
		- updated for "Canadian cross" setup
		- now uses $(conf_Srcdir) etc. instead of $(srcdir) etc.

		libexec/biting-pear/nomnom.cc :
		- moved from helper/crc64.cc

		libexec/biting-pear/omnomnom.lxx :
		- moved from helper/postpreproc.lxx
		- now checks host and target wchar_t compatibility for
		  []L"..." and $L"..."

		libexec/biting-pear/doge.ccc :
		- moved from util/biting-pear-doge.ccc
		- now includes <biting-pear/host/srsly.h> instead of
		  <biting-pear/srsly.h>

		include/biting-pear/bbq.h :
		- now includes different configuration header files on
		  host and target

		include/biting-pear/host/rly.h :
		- moved from include/biting-pear/rly.h

		include/biting-pear/host/srsly.h :
		- moved from include/biting-pear/srsly.h
		- now includes <biting-pear/host/rly.h> instead of
		  <biting-pear/rly.h>

		include/biting-pear/lolwut.h ,
		include/biting-pear/omg.h :
		- now only uses certain __asm constructs when compiling
		  with optimization

2015-12-29	For great random.  (2)

		include/biting-pear/srsly.h :
		- simplified

2015-12-28	For great random.

		include/biting-pear/rly.h ,
		include/biting-pear/srsly.h :
		- initial version

		include/biting-pear/yarly.h :
		- fixed really, really silly operator precedence bug
		- fixed really, really silly modulo bug

		util/biting-pear-doge.ccc :
		- now uses srsly.h

		GNUmakefile :
		- added rly.h and srsly.h as header dependencies

2015-12-26	And now for something remotely different.

		util/biting-pear-doge.ccc :
		- initial draft

		GNUmakefile :
		- now builds util/biting-pear-doge

		configure :
		- now probes for GNU BFD library

		include/biting-pear/dawg.h :
		- biting_pear::dawg_impl<...> now has default and copy
		  constructors
		- reduced template recursion levels, to make compilation
		  tractable

		lolwutconf/c++.inc :
		- added conf_cxx_probe_lib()

		.gitignore :
		- updated

2015-12-13	Syntactic sugar for strings.

		helper/postpreproc.lxx :
		- renamed from helper/postpreproc-2.lxx
		- added $"..." and $L"..."

		GNUmakefile :
		- added test cases for $"..." and $L"..."
		- now automatically invokes ./configure if config.cache
		  is absent
		- now builds helper/postpreproc and not helper/postpreproc-2

		test/test-extra-3.ccc ,
		test/test-extra-3.good ,
		test/test-extra-4.ccc ,
		test/test-extra-4.good :
		- initial version

		.gitignore :
		- updated

2015-11-24	getpid() and getppid().

		include/biting-pear/omg.h :
		- now makes bogus calls to getpid() and getppid() if signal-
		  -safe calls are allowed

		test/test-1.ccc ,
		test/test-2.ccc :
		- added allow_all tests

2015-09-27	Minor improvement.

		GNUmakefile :
		- now makes $(config.h) define `biting_pear_decltype'

		configure ,
		lolwutconf/c++.inc :
		- now checks for `decltype' support

		include/biting-pear/dawg.h ,
		include/biting-pear/omg.h ,
		test/test-2.ccc :
		- switched from using `__typeof' to using
		  `biting_pear_decltype'

		helper/postpreproc-2.lxx :
		- now rejects non-shortest UTF-8 character encodings
		- now checks for and rejects encodings of UTF-16
		  surrogate code points (\ud800--\udfff)

2015-09-24	Strings and more strings.

		GNUmakefile :
		- now outputs biting_pear_HAVE_CXX_VAR_TPLS macro
		- now runs test programs under en_US.UTF-8 locale
		- added <biting-pear/dawg.h>, <biting-pear/yodawg.h>,
		  test/test-extra-1, test/test-extra-2

		configure :
		- added specific test for C++11 variadic templates

		lolwutconf/c++.inc :
		- added specific test for C++11 variadic templates
		- fixed minor bug in conf_cxx_probe_endianness()
		- fixed minor bug in conf_cxx_chk_compiler_and_executor()

		include/biting-pear/dawg.h ,
		include/biting-pear/yodawg.h ,
		test/test-extra-1.ccc ,
		test/test-extra-1.good ,
		test/test-extra-2.ccc ,
		test/test-extra-2.good :
		- initial version

		include/biting-pear/kthxbai.h :
		- reduced template recursion levels to 3
		- now uses biting_pear_HAVE_CXX_VAR_TPLS

		include/biting-pear/lolwut.h ,
		include/biting-pear/omg.h :
		- reduced template recursion levels to 3

		.gitignore :
		- added test-extra-1 and test-extra-2

2015-09-20	Strings and lines.

		helper/postpreproc-2.lxx :
		- fixed corner cases in handling of strings
		- now parses #line directives and outputs error messages
		  according to them
		- added string splitting construct

2015-09-19	Now cross-compiles everything or nothing.

		GNUmakefile :
		- helper/postproc* -> helper/postpreproc-2*
		- now cross-compiles everything
		- now uses $(conf_Host_exec) to run helper/crc64.cc and
		  helper/postpreproc-2.cc

		helper/postpreproc-2.lxx :
		- renamed from helper/postproc.lxx

		configure :
		- removed checks for build-side stuff

		lolwutconf/c++.inc :
		- removed checks for build-side stuff

		lolwutconf/configure.inc :
		- added --host-exec

		include/biting-pear/lolwut.h :
		- fixed syntax bug in lolwut_impl<>

		.gitignore :
		- postproc* -> postpreproc-2*

2015-08-07	Delirant isti Romani.

		include/biting-pear/kthxbai.h :
		- biting_pear::kthxbai<> now allows operations other than
		  +/- for the outermost step

		configure :
		- removed check for build-side endianness

2015-07-21	Added flags to specify which (erm) operations to allow.
		And, now checks for runaway template recursion.

		include/biting-pear/nowai.h :
		- new

		include/biting-pear/bbq.h :
		- added biting_pear::impl::ops_flags_t and flags constants

		include/biting-pear/kthxbai.h ,
		include/biting-pear/lolwut.h ,
		include/biting-pear/orly.h :
		- added `Flags' template argument before `Levels'
		- now uses nowai.h

		include/biting-pear/omg.h :
		- added `Flags' template argument before `Levels'
		- now uses nowai.h
		- now checks for and uses allow_signal_safes in flags
		- tweaked distribution of types of operations

		include/biting-pear/yarly.h :
		- added `Flags' template argument before `Levels'
		- now uses nowai.h
		- reduced levels for kthxbai_impl from 4 to 3

		test/test-1.ccc :
		- h0, h1, and h2 are now initialized with <...allow_all>

		README.md :
		- updated synopsis to have `flags' template argument before
		  `levels'

		GNUmakefile :
		- added include/biting-pear/nowai.h as a file to depend on
		  and install

		configure ,
		lolwutconf/c++.inc :
		- added host-side and build-side endianness detection (for
		  use later)

		lolwutconf/configure.inc :
		- now tests for `grep' and `strings' utilities

2015-07-17	o rly?  ya rly!

		include/biting-pear/orly.h ,
		include/biting-pear/yarly.h ,
		test/test-3.ccc ,
		test/test-3.good :
		- new

		GNUmakefile :
		- added include/biting-pear/orly.h and include/biting-pear/
		  yarly.h as dependencies in compilation
		- added test-3

		.gitignore :
		- added test-3

2015-07-11	Multiplication.

		include/biting-pear/bbq.h ,
		include/biting-pear/kthxbai.h :
		- added multiplication and inverse multiplication

2015-07-10	C++ compiler all the way.

		GNUmakefile :
		- now compiles helper/crc64 from helper/crc64.cc

		helper/crc64.cc :
		- renamed from helper/crc64.c; C++-ized
		- changed read(...) call to fread(...)

		helper/postproc.lxx :
		- removed parser backtracking
		- newline can now follow backslash in "..." and '...'

		include/biting-pear/lolwut.h :
		- multiple layers of pointer arithmetic

2015-07-08	ARM Thumb-32 support.  Reduced number of recursion levels
		from 6 to 5, so that compiler does not exhaust memory.

		include/biting-pear/kthxbai.h :
		- reduced recursion levels

		include/biting-pear/lolwut.h :
		- reduced recursion levels
		- added ARM Thumb-32 handling for lolwut(, 1) and (, 2)

		include/biting-pear/omg.h :
		- reduced recursion levels
		- ARM architecture: added ARM mode and Thumb mode handling

		lolwutconf/c++.inc :
		- now handles stuff like --host=armv7-a-linux-gnueabi
		- now tries to turn on Thumb mode when compiling for ARM

		lolwutconf/configure.inc :
		- more useful --help

		test/test-2.ccc :
		- added a few more printf(...) calls

2015-07-05	Somewhat better support for cross compilation in general.

		configure :
		- now checks for C++11 on build side

		lolwutconf/configure.inc :
		- added --host
		- added build environment sanity checks
		- now prefixes status messages with `* '
		- now uses POSIX character classes for `sed'

		lolwutconf/c++.inc :
		- now handles --host input, with special case for x86-32
		  compilation on x86-64
		- now checks for C++11 on build side

		include/biting-pear/omg.h :
		- fixed a minor bug

2015-07-04	Better x86-32 support.

		include/biting-pear/lolwut.h :
		- added handling of code pointers for x86-32

		include/biting-pear/omg.h :
		- added x86-32 control flows and junk syscalls

2015-07-03	Function pointers!

		include/biting-pear/lolwut.h :
		- added lolwut(, 2), for function pointers
		- lolwut(, 1):
		  - changed threshold for leaq -> leaq + addq/subq split
		    from 0x7fff0000 to 0x70000000
		  - for splits, took addq/subq out of __asm(...) so that g++
		    can move them around
		  - changed %c assembly operand modifier to %a

		include/biting-pear/kthxbai.h :
		- on C++11 compiler, now specially checks for function
		  pointer type and behaves differently in that case
		- code formatting tweaks

		README.md :
		- changed recommended way of assigning values from `var =
		  val' to `var(val)'
		- added mention of function pointers

		test/test-2.ccc ,
		test/test-2.good :
		- initial version

		GNUmakefile :
		- added test-2
		- marked test files as .PRECIOUS

		.gitignore :
		- added test-2

2015-06-30	`make check' now works.

		GNUmakefile :
		- added rule for `make check'
		- added %.o to .PRECIOUS

		configure ,
		lolwutconf/c++.inc :
		- moved most default CXXFLAGS flags into `configure'

		lolwutconf/configure.inc :
		- fixed bug in conf__barf()

		lolwutconf/lolwutconf.mk :
		- added `check' to .PHONY

		README.md :
		- `uint_least64_t' -> `std::uint_least64_t'

		test/test-1.good :
		- added

		.gitignore :
		- added derp.h

2015-06-27	Pre-C++11 compiler support.  And, added +=, -=, ++, and --
		for pointers.

		include/biting-pear/bbq.h :
		- now uses generated include/biting-pear/derp.h

		include/biting-pear/kthxbai.h ,
		include/biting-pear/lolwut.h ,
		- added +=, -=, ++, and -- for pointers

		lolwutconf/c++.inc ,
		lolwutconf/configure.inc ,
		lolwutconf/lolwutconf.mk :
		- initial version

		GNUmakefile :
		- moved some logic into lolwutconf/lolwutconf.mk
		- now checks for both <cinttypes> and <inttypes.h>
		- now creates include/biting-pear/derp.h

		configure :
		- moved most logic into lolwutconf/*
		- now checks for both <cinttypes> and <inttypes.h>

2015-06-22	Further internal cleanup.

		include/biting-pear/bbq.h ,
		include/biting-pear/kthxbai.h ,
		include/biting-pear/lolwut.h , 
		include/biting-pear/omg.h :
		- internally set biting_pear_t::impl::rand_state_t =
		  std::uint_least64_t
		- internally renamed `Seed' variables to `State'

2015-06-21	Autoconfiscated... well, not really.

		configure :
		- initial version; does --srcdir and --prefix

		GNUmakefile :
		- now tries to read from config.cache if present
		- added `distclean', `install', and `uninstall' rules
		- added $(..._FOR_BUILD) variables, for rudimentary support
		  for cross-compilation
		- now uses $(LDLIBS) (and $(LDLIBS_FOR_BUILD)) when linking
		- added support for building outside of source tree, e.g.
		  use of $(VPATH)
		- updated name: helper/postproc.ll -> helper/postproc.lxx

		helper/postproc.lxx :
		- renamed from helper/postproc.ll, to avoid confusion with
		  LLVM files

		include/biting-pear/kthxbai.h ,
		include/biting-pear/lolwut.h ,
		include/biting-pear/omg.h ,
		test/test-1.ccc :
		- now use #include <...>, not #include "..."

		.gitignore :
		- added config.cache

2015-06-16	Added some semblance of documentation.

		README.md :
		- added documentation

		helper/postproc.ll :
		- fixed bugs in input parsing and output

2015-06-15	Reorganized directories.  And, junk bytes.

		include/biting-pear/omg.h :
		- moved from biting-pear/ to include/biting-pear/
		- added junk bytes
		- added more types of indirect jumps

		include/biting-pear/lolwut.h ,
		include/biting-pear/kthxbai.h :
		- moved from biting-pear/ to include/biting-pear/
		- kthxbai<> with pointer type now hands over to lolwut<>

		include/biting-pear/bbq.h :
		- moved from biting-pear/ to include/biting-pear/

		test/test-1.ccc :
		- moved from top directory

		.gitignore :
		- initial version

2015-06-14	14 Jun 2015 version.
